---
version: "3"

includes:
  k8s:
    internal: true
    taskfile: ../k8s
  cluster:
    internal: true
    taskfile: ../cluster

vars:
  C: '{{.C | default "biohazard"}}'

tasks:
  genconfig:
    desc: Decrypt cluster vars from .env to .yaml for talhelper to consume.
    dir: "/{{.ROOT_DIR}}/kube/clusters/{{.C}}/talos"
    vars:
      C: '{{ or .C (fail "Missing C environment variable for cluster!") }}'
    cmds:
      - pwd
      - sops --decrypt {{.ROOT_DIR}}/kube/clusters/{{.C}}/config/vars.sops.env | sops --config {{.ROOT_DIR}}/.sops-stdin.yaml --encrypt --output-type yaml --output ./talenv.sops.yaml /dev/stdin
      - talhelper genconfig -e ./talenv.sops.yaml
      - defer: rm -rf ./talenv.sops.yaml


  bootstrap:
    aliases: [bs]
    desc: Runs all bootstrap related tasks.
    dir: "/{{.ROOT_DIR}}/kube/clusters/{{.C}}/talos"
    vars:
      C: '{{ or .C (fail "Missing C environment variable for cluster!") }}'
      IP: '{{ or .IP (fail "Missing IP environment variable!") }}'
      HOST: '{{ or .HOST (fail "Missing HOST environment variable!") }}'
    cmds:
      - task: genconfig
        vars:
          C: '{{ or .C (fail "Missing C environment variable for cluster!") }}'
      - talosctl apply-config --insecure --endpoints {{.IP}} --nodes {{.IP}} --file /{{.ROOT_DIR}}/kube/clusters/{{.C}}/talos/clusterconfig/{{.C}}-{{.HOST}}.yaml
      - until talosctl bootstrap --talosconfig /{{.ROOT_DIR}}/kube/clusters/{{.C}}/talos/clusterconfig/talosconfig --endpoints {{.IP}} --nodes {{.IP}} --context {{.C}} ; do sleep 1; done
      - until talosctl kubeconfig --talosconfig /{{.ROOT_DIR}}/kube/clusters/{{.C}}/talos/clusterconfig/talosconfig --endpoints {{.IP}} --nodes {{.IP}} --context {{.C}} ; do sleep 1; done
      - |
        sed -i 's/current-context: admin@.*/current-context: admin@{{.C}}/g' ~/.kube/config || true
      - task: cilium-bootstrap-apply
        vars:
          C: '{{.C | default "biohazard"}}'
      - task: cluster:cluster-init-config
        vars:
          C: '{{.C | default "biohazard"}}'
          APPLY: "1"

  reboot:
    desc: Reboot nodes based on Kubernetes InternalIP. Assumes only 1 IP in InternalIP, and the IP known to Kubernetes is the same used by `talosctl`.
    vars:
      NODE: '{{ or .NODE (fail "Missing `NODE` environment variable!") }}'
    cmds:
      - talosctl reboot --nodes $(kubectl get nodes {{.NODE}} -o yaml | yq '.status.addresses | map(select(.type == "InternalIP")) | .[].address')
