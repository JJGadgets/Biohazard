---
version: "3"

includes:
  k8s:
    internal: true
    taskfile: ../k8s
  cluster:
    internal: true
    taskfile: ../cluster
  # bootstrap:
  #   internal: true
  #   taskfile: ../bootstrap

vars:
  C: '{{.C | default "biohazard"}}'

tasks:
  genconfig:
    desc: Decrypt cluster vars from .env to .yaml for talhelper to consume.
    dir: "/{{.ROOT_DIR}}/kube/clusters/{{.C}}/talos"
    vars:
      C: '{{ or .C (fail "Missing C environment variable for cluster!") }}'
    # dotenv:
    #   - "/{{.ROOT_DIR}}/.taskfiles/talos/talhelper-secrets-1p.env"
    env:
      cluster_id: "op://{{.C}}/.{{.C}}-talos/Secrets/cluster_id"
      cluster_secret: "op://{{.C}}/.{{.C}}-talos/Secrets/cluster_secret"
      secrets_bootstraptoken: "op://{{.C}}/.{{.C}}-talos/Secrets/secrets_bootstraptoken"
      secrets_secretboxencryptionsecret: "op://{{.C}}/.{{.C}}-talos/Secrets/secrets_secretboxencryptionsecret"
      trustdinfo_token: "op://{{.C}}/.{{.C}}-talos/Secrets/trustdinfo_token"
      certs_etcd_crt: "op://{{.C}}/.{{.C}}-talos/Secrets/certs_etcd_crt"
      certs_etcd_key: "op://{{.C}}/.{{.C}}-talos/Secrets/certs_etcd_key"
      certs_k8s_crt: "op://{{.C}}/.{{.C}}-talos/Secrets/certs_k8s_crt"
      certs_k8s_key: "op://{{.C}}/.{{.C}}-talos/Secrets/certs_k8s_key"
      certs_k8saggregator_crt: "op://{{.C}}/.{{.C}}-talos/Secrets/certs_k8saggregator_crt"
      certs_k8saggregator_key: "op://{{.C}}/.{{.C}}-talos/Secrets/certs_k8saggregator_key"
      certs_k8sserviceaccount_key: "op://{{.C}}/.{{.C}}-talos/Secrets/certs_k8sserviceaccount_key"
      certs_os_crt: "op://{{.C}}/.{{.C}}-talos/Secrets/certs_os_crt"
      certs_os_key: "op://{{.C}}/.{{.C}}-talos/Secrets/certs_os_key"
    cmds:
      - pwd
      - op user get --me # check signin status, fail if not signed in
      - op run -- task --taskfile /{{.ROOT_DIR}}/.taskfiles/bootstrap/Taskfile.dist.yaml 1p-vars-env-run C={{.C}} -- talhelper genconfig

  bootstrap:
    aliases: [bs]
    desc: Runs all bootstrap related tasks.
    dir: "/{{.ROOT_DIR}}/kube/clusters/{{.C}}/talos"
    vars:
      C: '{{ or .C (fail "Missing C environment variable for cluster!") }}'
      IP: '{{ or .IP (fail "Missing IP environment variable!") }}'
      HOST: '{{ or .HOST (fail "Missing HOST environment variable!") }}'
    cmds:
      - task: genconfig
        vars:
          C: '{{ or .C (fail "Missing C environment variable for cluster!") }}'
      - talosctl apply-config --insecure --endpoints {{.IP}} --nodes {{.IP}} --file /{{.ROOT_DIR}}/kube/clusters/{{.C}}/talos/clusterconfig/{{.C}}-{{.HOST}}.yaml
      - until talosctl bootstrap --talosconfig /{{.ROOT_DIR}}/kube/clusters/{{.C}}/talos/clusterconfig/talosconfig --endpoints {{.IP}} --nodes {{.IP}} --context {{.C}} ; do sleep 1; done
      - until talosctl kubeconfig --talosconfig /{{.ROOT_DIR}}/kube/clusters/{{.C}}/talos/clusterconfig/talosconfig --endpoints {{.IP}} --nodes {{.IP}} --context {{.C}} ; do sleep 1; done
      - |
        sed -i 's/current-context: admin@.*/current-context: admin@{{.C}}/g' ~/.kube/config || true
      # - task: cilium-bootstrap-apply
      #   vars:
      #     C: '{{.C | default "biohazard"}}'
      # - task: cluster:cluster-init-config
      #   vars:
      #     C: '{{.C | default "biohazard"}}'
      #     APPLY: "1"

  reboot:
    desc: Reboot nodes based on Kubernetes InternalIP. Assumes only 1 IP in InternalIP, and the IP known to Kubernetes is the same used by `talosctl`.
    vars:
      NODE: '{{ or .NODE (fail "Missing `NODE` environment variable!") }}'
    cmds:
      - talosctl reboot --nodes $(kubectl get nodes {{.NODE}} -o yaml | yq '.status.addresses | map(select(.type == "InternalIP")) | .[].address')
