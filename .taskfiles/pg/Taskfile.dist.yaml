---
version: "3"

# vars:
  # PG: '{{.PG | default "default"}}'
  # NS: '{{.NS | default "pg"}}'

tasks:
  rw:
    desc: Get current CloudNativePG master (writable) instance to run command against.
    dir: "{{.USER_WORKING_DIR}}"
    vars:
      APP: "{{.APP}}"
      PG: &pg-default
        sh: |-
          [[ -n "{{.PG}}" ]] && echo "{{.PG}}" || [[ -n "{{.APP}}" ]] && echo "pg-{{.APP}}" || echo "pg-default"
      NS: &ns-default
        sh: |-
          [[ -n "{{.NS}}" ]] && echo "{{.NS}}" || [[ -n "{{.APP}}" ]] && echo "{{.APP}}" || echo "pg"
      # PG: '{{ or .PG (fail "Missing `PG` environment variable!") }}'
      # NS: &ns-default '{{.NS | default "pg"}}'
    cmds:
      - kubectl get clusters.postgresql.cnpg.io -n {{.NS}} {{.PG}} -o yaml | yq '.status.currentPrimary' | xargs -o -I% kubectl -n {{.NS}} {{.CLI_ARGS}}

  adminer:
    desc: Use kubectl netshoot krew plugin to deploy adminer as sidecar to the current primary CNPG replica pod.
    dir: "{{.USER_WORKING_DIR}}"
    vars:
      APP: "{{.APP}}"
      PG: *pg-default
      NS: *ns-default
      PF_ADDR: '{{ .PF_ADDR | default "127.0.0.1" }}'
      PF_PORT: '{{ .PF_PORT | default "8080" }}'
    cmds:
      - |
        kubectl get clusters.postgresql.cnpg.io -n {{.NS}} {{.PG}} -o yaml | yq '.status.currentPrimary' | xargs -o -I% bash -c "while kubectl netshoot debug -n {{.NS}} % --image-name adminer --image-tag 4.8.1-standalone; do kubectl port-forward -n {{.NS}} % --address {{.PF_ADDR}} {{.PF_PORT}}:8080; break; done"

  crunchy-restore:
    desc: Restore a pg_dump to a CrunchyData Postgres cluster, writing to the master instance.
    dir: "{{.USER_WORKING_DIR}}"
    vars:
      APP: "{{.APP}}"
      PG: *pg-default
      NS: *ns-default
      DUMP: '{{ or .DUMP (fail "Missing `DUMP` environment variable for specifying pg_dump file location!") }}'
      CP_DIR: '{{ .CP_DIR | default "/pgdata" }}' # would've been /tmp or /run if Crunchy replica container didn't crash and restart when files are copied there for some reason, maybe small tmpfs size?
      DBNAME:
        sh: |-
          [[ -n "{{.DBNAME}}" ]] && echo "{{.DBNAME}}" || [[ -n "{{.APP}}" ]] && echo "{{.APP}}" || ( echo "Missing `DB` environment variable for specifying database name!" && exit 1 )
      DBUSER:
        sh: |-
          [[ -n "{{.DBUSER}}" ]] && echo "{{.DBUSER}}" || [[ -n "{{.APP}}" ]] && echo "{{.APP}}" || ( echo "Missing `USER` environment variable for specifying user name!" && exit 1 )
      ARGS: # TODO: (for other users) these are my personal defaults, please check and change accordingly if copying this task before running it!
        sh: |-
          [[ -n "{{.ARGS}}" ]] && echo "{{.ARGS}}" || echo "--verbose --format=c --clean --if-exists --no-owner --role {{.DBUSER}}"
      CRUNCHY_PRIMARY:
        sh: |-
          kubectl get pods -n {{.NS}} -l postgres-operator.crunchydata.com/role=master,postgres-operator.crunchydata.com/cluster={{.PG}} -o jsonpath='{.items[0].metadata.name}'
    env:
      DBUSER: '{{.DBUSER}}'
    cmds:
      - kubectl cp --container database {{.DUMP}} {{.NS}}/{{.CRUNCHY_PRIMARY}}:{{.CP_DIR}}/restore-dump.psql
      - |-
        kubectl exec -it --container database -n {{.NS}} {{.CRUNCHY_PRIMARY}} -- /bin/bash -c 'echo "ALTER DATABASE \"{{.DBNAME}}\" OWNER TO \"{{.DBUSER}}\";" | psql'
      - kubectl exec -it --container database -n {{.NS}} {{.CRUNCHY_PRIMARY}} -- /bin/bash -c 'pg_restore --dbname {{.DBNAME}} {{.ARGS}} {{.CP_DIR}}/restore-dump.psql'
      - defer: kubectl exec -it -n {{.NS}} {{.CRUNCHY_PRIMARY}} -- /bin/bash -c 'rm -rf {{.CP_DIR}}/restore-dump.psql'
