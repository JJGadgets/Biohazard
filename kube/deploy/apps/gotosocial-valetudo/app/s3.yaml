---
apiVersion: objectbucket.io/v1alpha1
kind: ObjectBucketClaim
metadata:
  name: "pg-gotosocial-valetudo-s3"
  namespace: "gotosocial-valetudo"
  labels:
    kustomize.toolkit.fluxcd.io/prune: "Disabled"
spec:
  bucketName: "pg-gotosocial-valetudo"
  storageClassName: "rgw-${CLUSTER_NAME}"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: "external-secrets-kubernetes-provider"
  namespace: "gotosocial-valetudo"
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["*"]
  - apiGroups: ["authorization.k8s.io"]
    resources: ["selfsubjectrulesreviews"]
    verbs: ["create"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: &name "external-secrets-kubernetes-provider"
  namespace: "gotosocial-valetudo"
roleRef:
  apiGroup: "rbac.authorization.k8s.io"
  kind: "Role"
  name: *name
subjects:
  - kind: "ServiceAccount"
    name: *name
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "external-secrets-kubernetes-provider"
  namespace: "gotosocial-valetudo"
---
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: "kubernetes-gotosocial-valetudo"
  namespace: &ns "gotosocial-valetudo"
spec:
  provider:
    kubernetes:
      remoteNamespace: *ns
      server:
        url: "https://kubernetes.default.svc.cluster.local"
        caProvider:
          type: "ConfigMap"
          name: "kube-root-ca.crt"
          key: "ca.crt"
      auth:
        serviceAccount:
          name: "external-secrets-kubernetes-provider"
---
# yaml-language-server: $schema=https://raw.githubusercontent.com/datreeio/CRDs-catalog/main/external-secrets.io/externalsecret_v1beta1.json
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: &name "pg-gotosocial-valetudo-s3"
  namespace: "gotosocial-valetudo"
spec:
  refreshInterval: "1m"
  secretStoreRef:
    kind: "SecretStore"
    name: "kubernetes-gotosocial-valetudo"
  target:
    name: "pg-gotosocial-valetudo-s3-crunchy"
    creationPolicy: "Owner"
    deletionPolicy: "Retain"
    template:
      type: "Opaque"
      data:
        s3-rgw.conf: |
          [global]
          repo3-s3-key={{ .AWS_ACCESS_KEY_ID }}
          repo3-s3-key-secret={{ .AWS_SECRET_ACCESS_KEY }}
  data:
    - secretKey: &key "AWS_ACCESS_KEY_ID"
      remoteRef: &src
        key: *name
        property: *key
    - secretKey: &key "AWS_SECRET_ACCESS_KEY"
      remoteRef:
        <<: *src
        property: *key

