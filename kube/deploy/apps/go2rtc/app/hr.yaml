---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/app-template-4.2.0/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app go2rtc
  namespace: *app
spec:
  interval: 5m
  chart:
    spec:
      chart: app-template
      version: 4.2.0
      sourceRef:
        name: bjw-s
        kind: HelmRepository
        namespace: flux-system
  values:
    controllers:
      app:
        type: deployment
        replicas: 1
        pod:
          labels:
            ingress.home.arpa/nginx-internal: allow
            egress.home.arpa/iot: allow
          annotations:
            k8s.v1.cni.cncf.io/networks: |
              [{
                "name":"iot",
                "namespace": "home-assistant",
                "ips": ["${APP_IP_GO2RTC_IOT}"],
                "mac": "${APP_MAC_GO2RTC_IOT}",
                "gateway": "${IP_ROUTER_VLAN_IOT}"
              }]
        containers:
          app:
            image: &img
              repository: ghcr.io/alexxit/go2rtc
              tag: 1.9.9@sha256:7d31dcb73633310e80497c431f4534c81ed55ec0708db3262bc56918e654bba5
            env: &env
              TZ: "${CONFIG_TZ}"
              HTTP_PORT: &http 8080
              RTSP_PORT: &rtsp 8554
            envFrom: &envFrom
              - secretRef:
                  name: go2rtc-secrets
            securityContext: &sc
              readOnlyRootFilesystem: true
              allowPrivilegeEscalation: false
              capabilities:
                drop: ["ALL"]
            resources:
              requests:
                cpu: "10m"
              limits:
                cpu: "1"
                memory: "512Mi"
                # gpu.intel.com/i915: "1"
            probes:
              liveness:
                enabled: true
              readiness:
                enabled: true
    service:
      app:
        controller: app
        ports:
          http:
            port: 80
            targetPort: *http
            protocol: HTTP
            appProtocol: http
      expose:
        primary: false
        controller: app
        type: LoadBalancer
        annotations:
          # coredns.io/hostname: "${APP_DNS_GO2RTC:=go2rtc}"
          lbipam.cilium.io/ips: "${APP_IP_GO2RTC:=127.0.0.1}"
        ports:
          http:
            port: *rtsp
            protocol: TCP
    ingress:
      app:
        className: nginx-internal
        annotations:
          nginx.ingress.kubernetes.io/whitelist-source-range: "${IP_JJ_V4:=127.0.0.1/32}"
        hosts:
          - host: &host "${APP_DNS_GO2RTC:=go2rtc}"
            paths: &paths
              - path: /
                pathType: Prefix
                service:
                  identifier: app
                  port: http
        tls:
          - hosts: [*host]
    persistence:
      config:
        type: configMap
        name: go2rtc-config
        advancedMounts:
          app:
            app:
              - path: /config
                readOnly: true
      # tls:
      #   type: secret
      #   name: go2rtc-tls
      #   defaultMode: 0400
      #   advancedMounts:
      #     go2rtc:
      #       main:
      #         - subPath: tls.crt
      #           path: /tls/fullchain.pem
      #           readOnly: true
      #         - subPath: tls.key
      #           path: /tls/privkey.pem
      #           readOnly: true
    defaultPodOptions:
      automountServiceAccountToken: false
      enableServiceLinks: false
      hostAliases:
        - ip: "${APP_IP_AUTHENTIK:=127.0.0.1}"
          hostnames: ["${APP_DNS_AUTHENTIK:=authentik}"]
      dnsConfig:
        options:
          - name: ndots
            value: "1"
      hostUsers: false
      securityContext:
        runAsNonRoot: true
        runAsUser: &uid 1000
        runAsGroup: *uid
        fsGroup: *uid
        fsGroupChangePolicy: Always
        seccompProfile: { type: "RuntimeDefault" }
      topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: kubernetes.io/hostname
          whenUnsatisfiable: DoNotSchedule
          labelSelector:
            matchLabels:
              app.kubernetes.io/name: "{{ .Release.Name }}"
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: "fuckoff.home.arpa/{{ .Release.Name }}"
                    operator: DoesNotExist
