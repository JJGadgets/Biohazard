---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/app-template-3.6.0/charts/other/app-template/schemas/helmrelease-helm-v2beta2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2beta2
kind: HelmRelease
metadata:
  name: &app home-assistant
  namespace: *app
spec:
  interval: 5m
  chart:
    spec:
      chart: app-template
      version: "3.6.0"
      sourceRef:
        name: bjw-s
        kind: HelmRepository
        namespace: flux-system
  values:
    controllers:
      home-assistant:
        type: deployment
        replicas: 1
        pod:
          hostname: "home-assistant"
          labels:
            ingress.home.arpa/nginx-internal: allow
            ingress.home.arpa/world: allow
            egress.home.arpa/iot: allow
            egress.home.arpa/appletv: allow
            egress.home.arpa/r2: allow
            db.home.arpa/emqx: emqx
          annotations:
            k8s.v1.cni.cncf.io/networks: |
              [{
                "name":"iot",
                "namespace": "home-assistant",
                "ips": ["${APP_IP_HOME_ASSISTANT_IOT}"],
                "mac": "${APP_MAC_HOME_ASSISTANT_IOT}",
                "gateway": "${IP_ROUTER_VLAN_IOT}"
              }]
            # generate reproducible "locally assigned" (aka non-vendor-assigned) MAC address from a FQDN (e.g. for Home Assistant Multus)
            # `echo "$FQDN" | md5sum | sed 's/^\(..\)\(..\)\(..\)\(..\)\(..\).*$/02:\1:\2:\3:\4:\5/'`
            # source: https://serverfault.com/questions/299556/how-to-generate-a-random-mac-address-from-the-linux-command-line/299563#299563
        containers:
          main:
            image:
              repository: "ghcr.io/onedr0p/home-assistant"
              tag: "2024.12.1@sha256:9f01866a8ae1ba747a64be0ee1497a21c73679e27de008799e7c3fcd25e6a7cb"
            env:
              TZ: "${CONFIG_TZ}"
            #envFrom:
            #  - secretRef:
            #      name: "home-assistant-secrets"
            securityContext: &sc
              readOnlyRootFilesystem: true
              allowPrivilegeEscalation: false
              capabilities:
                drop: ["ALL"]
            resources:
              requests:
                cpu: "10m"
              limits:
                cpu: "1"
                memory: "1Gi"
            probes:
              liveness:
                enabled: true
              readiness:
                enabled: true
          litestream: &ls
            image:
              repository: "docker.io/litestream/litestream"
              tag: "0.3.13@sha256:027eda2a89a86015b9797d2129d4dd447e8953097b4190e1d5a30b73e76d8d58"
            args: ["replicate"]
            envFrom:
              - secretRef:
                  name: litestream-secrets
            env: &lsenv
              DB_PATH: "/config/home-assistant_v2.db"
              REMOTE_PATH: "home-assistant/home-assistant_v2"
              VALIDATION_INTERVAL: "24h"
              AGE_PUBKEY:
                valueFrom:
                  secretKeyRef:
                    name: "home-assistant-secrets"
                    key: "AGE_PUBKEY"
              AGE_SECRET:
                valueFrom:
                  secretKeyRef:
                    name: "home-assistant-secrets"
                    key: "AGE_SECRET"
            securityContext: *sc
            resources:
              requests:
                cpu: 10m
                memory: 128Mi
              limits:
                cpu: "1"
                memory: 1024Mi
        initContainers:
          01-litestream-restore:
            <<: *ls
            args: ["restore", "-if-db-not-exists", "-if-replica-exists", "/config/home-assistant_v2.db"]
            env: *lsenv
      # vscode:
      #   type: deployment
      #   replicas: 0
      #   pod:
      #     labels:
      #       ingress.home.arpa/nginx-internal: "allow"
      #   containers:
      #     main:
      #       image:
      #         repository: "ghcr.io/coder/code-server"
      #         tag: "4.95.3@sha256:6d74583d68179cbb6ddadc2518b450d2ac3eaec2d342474fe1941e03371cd2cf"
      #       command: ["dumb-init", "/usr/bin/code-server"]
      #       args:
      #         - "--auth"
      #         - "none"
      #         - "--disable-telemetry"
      #         - "--user-data-dir"
      #         - "/home/coder/.vscode"
      #         - "--extensions-dir"
      #         - "/home/coder/.vscode"
      #         - "--bind-addr"
      #         - "0.0.0.0:8080"
      #         - "--port"
      #         - "8080"
      #         - "/home/coder"
      #       env:
      #         TZ: "${CONFIG_TZ}"
      #       securityContext:
      #         <<: *sc
      #         runAsUser: 1000 # coder
      #       resources:
      #         requests:
      #           cpu: "10m"
      #         limits:
      #           cpu: "500m" # I previously had a code-server that would eat cores
      #           memory: "1Gi"
      #       probes:
      #         liveness:
      #           enabled: true
      #         readiness:
      #           enabled: true
    service:
      home-assistant:
        primary: true
        controller: "home-assistant"
        ports:
          http:
            port: 8123
            protocol: TCP
            appProtocol: http
            primary: true
      # vscode:
      #   primary: false
      #   controller: "vscode"
      #   ports:
      #     http:
      #       port: 8080
      expose:
        primary: false
        controller: "home-assistant"
        type: LoadBalancer
        annotations:
          "io.cilium/lb-ipam-ips": "${APP_IP_HOME_ASSISTANT}"
        ports:
          homekit:
            port: 21061
            protocol: TCP
            primary: false
    ingress:
      main:
        className: "nginx-internal"
        hosts:
          - host: &host "${APP_DNS_HOME_ASSISTANT:=home-assistant}"
            paths: &paths
              - path: /
                pathType: Prefix
                service:
                  identifier: home-assistant
                  port: http
        tls: &tls
          - hosts: [*host]
      # vscode:
      #   className: "tailscale"
      #   hosts:
      #     - host: &host "hass-edit.${DNS_TS:=ts.net}"
      #       paths: &paths
      #         - path: /
      #           pathType: Prefix
      #           service:
      #             identifier: vscode
      #             port: http
      #   tls:
      #     - hosts: [*host]
    persistence:
      config:
        existingClaim: "home-assistant-data"
        advancedMounts:
          home-assistant:
            main: &pvc
              - subPath: "config"
                path: "/config"
                readOnly: false
            litestream: *pvc
            01-litestream-restore: *pvc
          # vscode:
          #   main:
          #     - path: "/home/coder"
          #       readOnly: false
      tmp:
        type: emptyDir
        medium: Memory
        globalMounts:
          - subPath: "tmp"
            path: "/tmp"
            readOnly: false
      litestream:
        type: secret
        name: "litestream-secrets"
        advancedMounts:
          home-assistant:
            litestream: &lsmnt
              - subPath: "litestream.yml"
                path: "/etc/litestream.yml"
                readOnly: true
            01-litestream-restore: *lsmnt
    defaultPodOptions:
      automountServiceAccountToken: false
      enableServiceLinks: false
      # hostUsers: false # CephFS support needed
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        runAsGroup: &gid 65533
        fsGroup: *gid
        fsGroupChangePolicy: "Always"
        seccompProfile: { type: "RuntimeDefault" }
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: "fuckoff.home.arpa/home-assistant"
                    operator: "DoesNotExist"
