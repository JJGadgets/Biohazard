---
apiVersion: helm.toolkit.fluxcd.io/v2beta2
kind: HelmRelease
metadata:
  name: &app immich
  namespace: *app
spec:
  interval: 5m
  chart:
    spec:
      chart: app-template
      version: 3.1.0
      sourceRef:
        name: bjw-s
        kind: HelmRepository
        namespace: flux-system
  values:
    controllers:
      immich:
        type: deployment
        replicas: 1
        pod:
          labels:
            ingress.home.arpa/nginx-internal: allow
            db.home.arpa/pg: pg-home
            authentik.home.arpa/https: allow
        containers:
          main:
            image: &img
              repository: ghcr.io/immich-app/immich-server
              tag: v1.103.1@sha256:10761af14a6145353169042f29d2e49943de75b57a5d19251b365fe0d41ee15a
            command: &cmd ["tini", "--", "node", "/usr/src/app/dist/main"]
            args: ["immich"]
            env: &env
              TZ: "${CONFIG_TZ}"
              LD_PRELOAD: /usr/lib/x86_64-linux-gnu/libmimalloc.so.2
              NODE_ENV: production
              LOG_LEVEL: verbose
              IMMICH_MEDIA_LOCATION: &pvc /data
              IMMICH_SERVER_URL: http://immich.immich.svc.cluster.local:3001
              IMMICH_MACHINE_LEARNING_URL: http://immich-ml.immich.svc.cluster.local:3003
              REDIS_HOSTNAME: immich-redis.immich.svc.cluster.local
              REDIS_PORT: "6379"
              DB_VECTOR_EXTENSION: pgvector # I couldn't really care less for worser machine learning, over half my library is screenshots
              DB_URL:
                valueFrom:
                  secretKeyRef:
                    name: pg-home-pguser-immich-fixed
                    key: pgbouncer-uri-sslmode
            envFrom: &ef
              - secretRef:
                  name: immich-secrets
            securityContext: &sc
              readOnlyRootFilesystem: true
              allowPrivilegeEscalation: false
              capabilities:
                drop: ["ALL"]
            resources:
              requests:
                cpu: "10m"
                memory: "128Mi"
              limits:
                cpu: "3000m"
                memory: "2Gi"
      microservices:
        type: deployment
        replicas: 3
        strategy: RollingUpdate
        rollingUpdate:
          unavailable: "90%"
        pod:
          labels:
            db.home.arpa/pg: pg-home
          topologySpreadConstraints:
            - maxSkew: 1
              topologyKey: kubernetes.io/hostname
              whenUnsatisfiable: DoNotSchedule
              labelSelector:
                matchLabels:
                  app.kubernetes.io/name: *app
                  app.kubernetes.io/instance: *app
                  app.kubernetes.io/component: microservices
        containers:
          main:
            image: *img
            command: *cmd
            args: ["microservices"]
            env: *env
            securityContext: *sc
            resources:
              requests:
                cpu: "100m"
                memory: "300Mi"
                gpu.intel.com/i915: "1"
              limits:
                cpu: "1000m" # my machine will actually die
                memory: "2Gi"
                gpu.intel.com/i915: "1"
      ml:
        type: statefulset
        replicas: 3
        pod:
          labels:
            db.home.arpa/pg: pg-home
          topologySpreadConstraints:
            - maxSkew: 1
              topologyKey: kubernetes.io/hostname
              whenUnsatisfiable: DoNotSchedule
              labelSelector:
                matchLabels:
                  app.kubernetes.io/name: *app
                  app.kubernetes.io/instance: *app
                  app.kubernetes.io/component: microservices
        containers:
          main:
            image:
              repository: ghcr.io/immich-app/immich-machine-learning
              tag: v1.103.1@sha256:708ff677ab952dda9d7cb9343a6d650a6ac02a4e6c7447015f9df95c780cfc42
            env: *env
            securityContext: *sc
            resources:
              requests:
                cpu: "10m"
                memory: "1Gi"
              limits:
                cpu: "1000m"
                memory: "6Gi"
        statefulset:
          volumeClaimTemplates:
            - name: data
              size: 10Gi
              storageClass: local
              accessMode: ReadWriteOnce
              globalMounts:
                - path: /cache
      redis:
        type: deployment
        replicas: 1
        containers:
          redis:
            image:
              repository: "public.ecr.aws/docker/library/redis"
              tag: "7.2.4@sha256:f14f42fc7e824b93c0e2fe3cdf42f68197ee0311c3d2e0235be37480b2e208e6"
            command: ["redis-server", "--save", "300 1", "--appendonly", "yes"] # save and appendonly options forcibly disable RDB and AOF persistence entirely
            securityContext: *sc
            resources:
              requests:
                cpu: "10m"
                memory: "32Mi"
              limits:
                cpu: "1000m"
                memory: "512Mi"
    service:
      immich:
        controller: immich
        ports:
          http:
            port: 3001
      ml:
        controller: ml
        ports:
          http:
            port: 3003
      redis:
        controller: redis
        ports:
          http:
            port: 6379
    ingress:
      main:
        className: nginx-internal
        hosts:
          - host: &host "${APP_DNS_IMMICH}"
            paths: &paths
              - path: /
                pathType: Prefix
                service:
                  identifier: immich
                  port: http
        tls:
          - hosts: [*host]
    persistence:
      data:
        existingClaim: immich-data
        advancedMounts:
          immich: &mount
            main:
              - subPath: data
                path: *pvc
          microservices: *mount
          redis:
            main:
              - subPath: redis
                path: /data
      tmp:
        type: emptyDir
        medium: Memory
        globalMounts:
          - subPath: tmp
            path: /tmp
          - subPath: geocode
            path: /usr/src/app/.reverse-geocoding-dump
          - subPath: geoname
            path: /usr/src/app/node_modules/local-reverse-geocoder/geonames_dump
          - subPath: transformers
            path: /usr/src/app/.transformers_cache
      pg-ca:
        type: secret
        name: pg-home-ca
        defaultMode: 0400
        globalMounts:
          - subPath: ca.crt
            path: /secrets/pg/ca.crt
    defaultPodOptions:
      automountServiceAccountToken: false
      enableServiceLinks: false
      hostAliases:
        - ip: "${APP_IP_AUTHENTIK}"
          hostnames: ["${APP_DNS_AUTHENTIK}"]
      securityContext:
        runAsNonRoot: true
        runAsUser: &uid ${APP_UID_IMMICH}
        runAsGroup: *uid
        fsGroup: *uid
        fsGroupChangePolicy: Always
        seccompProfile: { type: "RuntimeDefault" }
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: fuckoff.home.arpa/immich
                    operator: DoesNotExist
    networkpolicies:
      immich:
        podSelector: &sel
          matchLabels:
            app.kubernetes.io/name: immich
        policyTypes: [Ingress, Egress]
        rules:
          ingress:
            - from: [{podSelector: *sel}]
          egress:
            - to: [{podSelector: *sel}]
