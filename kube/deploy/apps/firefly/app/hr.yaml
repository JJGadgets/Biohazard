---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/app-template-4.4.0/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app firefly
  namespace: *app
  labels:
    nginx.ingress.home.arpa/type: auth
spec:
  interval: 5m
  chart:
    spec:
      chart: app-template
      version: 4.4.0
      sourceRef:
        name: bjw-s
        kind: HelmRepository
        namespace: flux-system
  values:
    controllers:
      firefly:
        type: deployment
        replicas: 1
        pod:
          labels:
            ingress.home.arpa/nginx-internal: allow
        containers:
          main:
            image: &img
              repository: docker.io/fireflyiii/core
              tag: version-6.2.7@sha256:dc78dac2d3db78665e17c89f5075602ec8f7c84d10610a7888e633b83334a340
            env: &env
              TZ: "${CONFIG_TZ}"
              APP_ENV: "production"
              APP_DEBUG: "false"
              LOG_CHANNEL: "stdout"
              APP_LOG_LEVEL: "notice"
              AUDIT_LOG_LEVEL: "info"
              DEFAULT_LANGUAGE: "en_US"
              DEFAULT_LOCALE: "equal"
              SITE_OWNER: "JJGadgets"
              APP_URL: "https://${APP_DNS_FIREFLY}"
              TRUSTED_PROXIES: "*"
              COOKIE_PATH: "/"
              COOKIE_DOMAIN: "${APP_DNS_FIREFLY}"
              COOKIE_SECURE: "true"
              COOKIE_SAMESITE: "lax"
              DISABLE_FRAME_HEADER: "false" # just to be sure
              DISABLE_CSP_HEADER: "false" # just to be sure
              TRACKER_SITE_ID: "" # just to be sure
              TRACKER_URL: "" # just to be sure
              AUTHENTICATION_GUARD: "remote_user_guard"
              AUTHENTICATION_GUARD_HEADER: "HTTP_X_AUTHENTIK_USERNAME" # disabled username change ability for users
              AUTHENTICATION_GUARD_EMAIL: "HTTP_X_AUTHENTIK_EMAIL" # somehow doesn't work?
              DB_CONNECTION: "sqlite"
              DKR_CHECK_SQLITE: "false" # auto create?
              CACHE_DRIVER: "file"
              SESSION_DRIVER: "file"
              SEND_ERROR_MESSAGE: "true"
              SEND_REPORT_JOURNALS: "false"
              ENABLE_EXCHANGE_RATES: "false"
              # ENABLE_EXTERNAL_RATES: "true"
              ALLOW_WEBHOOKS: "false"
              APP_KEY:
                valueFrom:
                  secretKeyRef:
                    name: firefly-secrets
                    key: APP_KEY
            securityContext: &sc
              # readOnlyRootFilesystem: true # nginx init stuff
              allowPrivilegeEscalation: false
              capabilities:
                drop: ["ALL"]
            resources:
              requests:
                cpu: "10m"
                memory: "100Mi"
              limits:
                cpu: "1"
                memory: "512Mi"
            probes:
              liveness:
                enabled: true
              readiness:
                enabled: true
      data-importer:
        type: deployment
        replicas: 1
        pod:
          labels:
            ingress.home.arpa/nginx-internal: allow
        containers:
          main:
            image:
              repository: docker.io/fireflyiii/data-importer
              tag: version-1.6.1@sha256:40e10f996a7bf72285dd6475c49424a02255fb02437904fe2ee6c44bc07e1bfc
            env:
              TZ: "${CONFIG_TZ}"
              APP_ENV: "production"
              APP_DEBUG: "false"
              LOG_CHANNEL: "stdout"
              FIREFLY_III_URL: http://firefly.firefly.svc.cluster.local:8080
              VANITY_URL: "https://${APP_DNS_FIREFLY}"
              # FIREFLY_III_CLIENT_ID:
              #   valueFrom:
              #     secretKeyRef:
              #       name: firefly-secrets
              #       key: FIREFLY_III_CLIENT_ID
            securityContext: *sc
            resources:
              requests:
                cpu: "10m"
                memory: "100Mi"
              limits:
                cpu: "1"
                memory: "1Gi"
            probes:
              liveness:
                enabled: true
              readiness:
                enabled: true
    service:
      firefly:
        controller: firefly
        ports:
          http:
            port: 8080
            protocol: HTTP
            appProtocol: http
      data-importer:
        controller: data-importer
        ports:
          http:
            port: 8080
            protocol: HTTP
            appProtocol: http
    ingress:
      main:
        className: nginx-internal
        annotations:
          nginx.ingress.kubernetes.io/auth-signin: |-
            https://${APP_DNS_FIREFLY}/outpost.goauthentik.io/start?rd=$escaped_request_uri
        hosts:
          - host: &host "${APP_DNS_FIREFLY:=firefly}"
            paths:
              - &path
                path: /
                pathType: Prefix
                service:
                  identifier: firefly
                  port: http
        tls: &tls
          - hosts: [*host]
      api:
        className: nginx-internal
        hosts:
          - host: "${APP_DNS_FIREFLY:=firefly}"
            paths:
              - <<: *path
                path: /api
        tls: *tls
      data-importer:
        className: nginx-internal
        hosts:
          - host: "${APP_DNS_FIREFLY_DATA_IMPORTER:=firefly-data-importer}"
            paths:
              - path: /
                pathType: Prefix
                service:
                  identifier: data-importer
                  port: http
        tls: *tls
    persistence:
      data:
        existingClaim: firefly-data
        advancedMounts:
          firefly:
            main:
              - subPath: data
                path: /var/www/html/storage
              - subPath: upload
                path: /var/www/html/storage/upload
          data-importer:
            main:
              - subPath: importer
                path: /var/www/html/storage/uploads
    defaultPodOptions:
      automountServiceAccountToken: false
      enableServiceLinks: false
      hostAliases:
        - ip: "${APP_IP_AUTHENTIK:=127.0.0.1}"
          hostnames: ["${APP_DNS_AUTHENTIK:=authentik}"]
      dnsConfig:
        options:
          - name: ndots
            value: "1"
      hostUsers: false
      securityContext:
        runAsNonRoot: true
        runAsUser: &uid 33
        runAsGroup: *uid
        fsGroup: *uid
        fsGroupChangePolicy: Always
        seccompProfile: { type: "RuntimeDefault" }
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: fuckoff.home.arpa/firefly
                    operator: DoesNotExist
    networkpolicies:
      same-ns:
        podSelector: {}
        policyTypes: [Ingress, Egress]
        rules:
          ingress: [from: [{podSelector: {}}]]
          egress: [to: [{podSelector: {}}]]
