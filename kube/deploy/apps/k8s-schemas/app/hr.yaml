---
apiVersion: helm.toolkit.fluxcd.io/v2beta2
kind: HelmRelease
metadata:
  name: &app k8s-schemas
  namespace: *app
spec:
  interval: 5m
  chart:
    spec:
      chart: app-template
      version: "2.6.0"
      sourceRef:
        name: bjw-s
        kind: HelmRepository
        namespace: flux-system
  values:
    controllers:
      extract:
        type: cronjob
        cronjob:
          schedule: "0 * * * *"
          concurrencyPolicy: "Replace"
        pod:
          automountServiceAccountToken: true
          labels:
            egress.home.arpa/apiserver: "allow"
            egress.home.arpa/r2: "allow"
            egress.home.arpa/github: "allow" # only because of the openapi2jsonschema.py script lol
            s3.home.arpa/store: "rgw-${CLUSTER_NAME}"
        initContainers:
          01-extract:
            image:
              repository: "jank.ing/jjgadgets/k8s-crd-extractor"
              tag: "20241204@sha256:8614028c4b9aab7a390430b46911c8fe891682769cdf3db9896b4459ef5b17e9"
            env:
              TZ: "${CONFIG_TZ}"
              HOME: ""
            securityContext: &sc
              readOnlyRootFilesystem: true
              allowPrivilegeEscalation: false
              capabilities:
                drop: ["ALL"]
            resources:
              requests:
                cpu: "10m"
                memory: "128Mi"
              limits:
                cpu: "1000m"
                memory: "6000Mi"
        containers:
          rclone-r2: &rclone
            image: &rcimg
              repository: "jank.ing/jjgadgets/rclone"
              tag: "1.68.2@sha256:b4c7113b25dce22bd7eb59377cd87a40ed9a1172909d2091ebe010a7b1e1adeb"
            args: ["sync", "/.datree/crdSchemas/", "r2:k8s-schemas/", "--progress", "--fast-list", "--checksum"]
            env:
              TZ: "${CONFIG_TZ}"
            securityContext: *sc
            resources:
              requests:
                cpu: "10m"
                memory: "128Mi"
              limits:
                cpu: "1000m"
                memory: "6000Mi"
          rclone-rgw:
            <<: *rclone
            args: ["sync", "/.datree/crdSchemas/", "rgw:k8s-schemas-rgw", "--progress", "--fast-list", "--checksum"]
            envFrom:
              - secretRef:
                  name: "k8s-schemas-rgw"
            securityContext: *sc
      main:
        type: daemonset
        pod:
          automountServiceAccountToken: false
          labels:
            ingress.home.arpa/nginx-internal: "allow"
        containers:
          main:
            image: *rcimg
            args: ["serve", "http", "rgw:", "--read-only", "--no-modtime", "--vfs-cache-mode", "full", "--cache-dir", "/tmp/cache", "--addr", ":8080"]
            envFrom:
              - secretRef:
                  name: "k8s-schemas-rgw"
            securityContext: *sc
            resources:
              requests:
                cpu: "10m"
                memory: "128Mi"
              limits:
                cpu: "2000m"
                memory: "1024Mi"
    serviceAccount:
      create: true
      name: *app
    service:
      main:
        ports:
          http:
            port: 8080
    ingress:
      main:
        enabled: true
        primary: true
        className: "nginx-internal"
        hosts:
          - host: &host "${APP_DNS_K8S_SCHEMAS:=schemas}"
            paths:
              - path: /
                pathType: Prefix
                service:
                  name: main
                  port: http
        tls:
          - hosts: [*host]
    persistence:
      config:
        enabled: true
        type: secret
        name: "k8s-schemas-rclone"
        globalMounts:
          - subPath: "rclone.conf"
            path: "/.rclone.conf"
            readOnly: true
      tmp:
        enabled: true
        type: emptyDir
        medium: Memory
        globalMounts:
          - subPath: "tmp"
            path: "/tmp"
            readOnly: false
          - subPath: "datree"
            path: "/.datree"
            readOnly: false
    defaultPodOptions:
      enableServiceLinks: false
      securityContext:
        runAsNonRoot: true
        runAsUser: &uid 1000
        runAsGroup: *uid
        fsGroup: *uid
        fsGroupChangePolicy: "Always"
        seccompProfile: { type: "RuntimeDefault" }
      topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: "kubernetes.io/hostname"
          whenUnsatisfiable: "DoNotSchedule"
          labelSelector:
            matchLabels:
              app.kubernetes.io/name: *app
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: "fuckoff.home.arpa/k8s-schemas"
                    operator: "DoesNotExist"
