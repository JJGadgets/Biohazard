---
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app davis
  namespace: *app
spec:
  interval: 5m
  chart:
    spec:
      chart: app-template
      version: "2.6.0"
      sourceRef:
        name: bjw-s
        kind: HelmRepository
        namespace: flux-system
  values:
    controllers:
      main:
        type: deployment
        replicas: 1
        pod:
          labels:
            ingress.home.arpa/nginx-internal: allow
            db.home.arpa/pg: pg-home
            authentik.home.arpa/ldap: allow
        containers:
          main:
            image: &img
              repository: ghcr.io/tchapi/davis
              tag: "4.4.4@sha256:bbdb3a34c87d82b28f1468f8ef1946d5a74f382740eb40b3215685fae26192fa"
            env: &env
              APP_TIMEZONE: "${CONFIG_TZ:=sample}"
              APP_ENV: prod
              DATABASE_DRIVER: postgresql
              DATABASE_URL:
                valueFrom:
                  secretKeyRef:
                    name: pg-home-pguser-davis
                    key: pgbouncer-uri
              WEBDAV_ENABLED: "false"
              CALDAV_ENABLED: "true"
              CARDDAV_ENABLED: "true"
              LOG_FILE_PATH: /tmp/davis.log
              #ADMIN_AUTH_BYPASS: "true" # forward-auth for /dashboard # TODO: fix forward auth for dashboard
              AUTH_METHOD: LDAP
              LDAP_AUTH_URL: "ldaps://${APP_DNS_AUTHENTIK_LDAP}:636"
              LDAP_DN_PATTERN: "cn=%U,ou=users,dc=ldap,dc=goauthentik,dc=io"
              LDAP_MAIL_ATTRIBUTE: mail
              LDAP_AUTH_USER_AUTOCREATE: "true"
              TRUSTED_PROXIES: "${IP_POD_CIDR_V4:=sample},127.0.0.1"
              TRUSTED_HOSTS: "${APP_DNS_DAVIS:=sample}"
            envFrom: &envFrom
              - secretRef:
                  name: davis-secrets
            securityContext: &sc
              readOnlyRootFilesystem: true
              allowPrivilegeEscalation: false
              capabilities:
                drop: ["ALL"]
            resources:
              requests:
                cpu: "5m"
                memory: "128Mi"
              limits:
                cpu: "3000m"
                memory: "6Gi"
          caddy:
            image:
              repository: jank.ing/jjgadgets/caddy-distroless-base
              tag: "2.9.1@sha256:651fac98c1794ce3bd2cef1a7dc3ff3e61157718ce3781aa218b6167cbfb182c"
            args: ["run", "--config", "/config/Caddyfile"]
            securityContext:
              readOnlyRootFilesystem: true
              allowPrivilegeEscalation: false
              capabilities:
                drop: ["ALL"]
                add: ["NET_BIND_SERVICE"]
            resources:
              requests:
                cpu: "5m"
                memory: "128Mi"
              limits:
                cpu: "1000m"
                memory: "512Mi"
        initContainers:
          01-public:
            image: *img
            command: ["/bin/sh", "-c", "cp -r /var/www/davis/public /web"]
            env: *env
            envFrom: *envFrom
            securityContext: *sc
            resources:
              requests:
                cpu: 5m
                memory: 10M
          02-db-migrate:
            image: *img
            command: ["/var/www/davis/bin/console", "doctrine:migrations:migrate", "--no-interaction"]
            env: *env
            envFrom: *envFrom
            securityContext: *sc
            resources:
              requests:
                cpu: 5m
                memory: 10M
    service:
      main:
        ports:
          http:
            port: 8080
    ingress:
      main:
        enabled: true
        primary: true
        className: nginx-internal
        hosts:
          - host: &host "${APP_DNS_DAVIS:=sample}"
            paths: &paths
              - path: /
                pathType: Prefix
                service:
                  name: main
                  port: http
        tls:
          - hosts: [*host]
    persistence:
      config:
        enabled: true
        type: configMap
        name: davis-config
        advancedMounts:
          main:
            caddy:
              - subPath: Caddyfile
                path: /config/Caddyfile
      tmp:
        enabled: true
        type: emptyDir
        medium: Memory
        globalMounts:
          - subPath: tmp
            path: /tmp
        advancedMounts:
          main:
            01-public:
              - path: /web
            caddy: &public
              - subPath: public
                path: /var/www/davis/public
            main: *public
            02-db-migrate: *public
    configMaps:
      config:
        enabled: true
        data:
          Caddyfile: |
            {
              log {
                level info
                output stderr
                format console
              }
              http_port 8080
              https_port 8443
              servers {
                trusted_proxies static ${IP_POD_CIDR_V4}
                trusted_proxies_strict
              }
            }
            ${APP_DNS_DAVIS:=sample}:8080 {
              log
              header -Server
              header -X-Powered-By
              header Referrer-Policy no-referrer-when-downgrade
              header X-Content-Type-Options nosniff
              header Strict-Transport-Security "max-age=15768000;preload"
              redir /.well-known/carddav /dav/ 301
              redir /.well-known/caldav /dav/ 301
              root * /var/www/davis/public
              encode zstd gzip
              php_fastcgi 127.0.0.1:9000 {
                trusted_proxies ${IP_POD_CIDR_V4:=sample}
              }
              file_server {
                hide .git .gitignore
              }
            }

    defaultPodOptions:
      automountServiceAccountToken: false
      enableServiceLinks: false
      securityContext:
        runAsNonRoot: true
        runAsUser: &uid 82 # php-fpm server
        runAsGroup: *uid
        fsGroup: *uid
        fsGroupChangePolicy: Always
        seccompProfile: { type: "RuntimeDefault" }
      topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: kubernetes.io/hostname
          whenUnsatisfiable: DoNotSchedule
          labelSelector:
            matchLabels:
              app.kubernetes.io/name: *app
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: fuckoff.home.arpa/davis
                    operator: DoesNotExist
