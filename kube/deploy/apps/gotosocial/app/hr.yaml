---
apiVersion: helm.toolkit.fluxcd.io/v2beta2
kind: HelmRelease
metadata:
  name: &app gotosocial
  namespace: *app
spec:
  interval: 5m
  chart:
    spec:
      chart: app-template
      version: 3.1.0
      sourceRef:
        name: bjw-s
        kind: HelmRepository
        namespace: flux-system
  values:
    controllers:
      gotosocial:
        type: deployment
        replicas: 1
        pod:
          labels:
            ingress.home.arpa/nginx-internal: "allow"
            ingress.home.arpa/nginx-public: "allow"
            ingress.home.arpa/cloudflare: "allow"
            db.home.arpa/pg: "pg-gotosocial"
            s3.home.arpa/store: "rgw-${CLUSTER_NAME}"
            authentik.home.arpa/https: "allow"
            egress.home.arpa/internet: "allow"
            prom.home.arpa/kps: "allow"
        containers:
          main:
            image: &img
              repository: "jank.ing/jjgadgets/gotosocial"
              tag: "0.16.0@sha256:0a0f4d2f1c349f9029f5e339ff5fa460b1c69ceb4d13b7854223ab3c22e6eb76"
            env: &env
              TZ: "${CONFIG_TZ}"
              GTS_APPLICATION_NAME: "The JJGadgets Hut"
              GTS_LANDING_PAGE_USER: "jj"
              GTS_HOST: &host "social.jjgadgets.tech"
              GTS_ACCOUNT_DOMAIN: "jjgadgets.tech"
              GTS_PROTOCOL: "http"
              GTS_PORT: "8080"
              GTS_TRUSTED_PROXIES: "${IP_POD_CIDR_V4}"
              GTS_ACCOUNTS_REGISTRATION_OPEN: "false"
              GTS_METRICS_ENABLED: "true"
              GTS_OIDC_ENABLED: "true"
              GTS_OIDC_IDP_NAME: "JJGadgets Auth"
              # OIDC secrets in ExternalSecret envFrom
              GTS_DB_TYPE: "postgres"
              GTS_DB_TLS_MODE: "enable"
              GTS_DB_ADDRESS:
                valueFrom:
                  secretKeyRef:
                    name: &pgsec "pg-gotosocial-pguser-gotosocial"
                    key: "pgbouncer-host"
              GTS_DB_DATABASE:
                valueFrom:
                  secretKeyRef:
                    name: *pgsec
                    key: "dbname"
              GTS_DB_USER:
                valueFrom:
                  secretKeyRef:
                    name: *pgsec
                    key: "user"
              GTS_DB_PASSWORD:
                valueFrom:
                  secretKeyRef:
                    name: *pgsec
                    key: "password"
              #GTS_STORAGE_LOCAL_BASE_PATH: &media "/gotosocial/storage"
              GTS_STORAGE_BACKEND: "s3"
              GTS_STORAGE_S3_PROXY: "true"
              GTS_STORAGE_S3_USE_SSL: "false"
              GTS_STORAGE_S3_ENDPOINT: "rook-ceph-rgw-${CLUSTER_NAME}.rook-ceph.svc.cluster.local.:6953"
              GTS_STORAGE_S3_BUCKET: "gotosocial-media"
              GTS_STORAGE_S3_ACCESS_KEY:
                valueFrom:
                  secretKeyRef:
                    name: "gotosocial-media-s3"
                    key: "AWS_ACCESS_KEY_ID"
              GTS_STORAGE_S3_SECRET_KEY:
                valueFrom:
                  secretKeyRef:
                    name: "gotosocial-media-s3"
                    key: "AWS_SECRET_ACCESS_KEY"
            envFrom: &envFrom
              - secretRef:
                  name: gotosocial-secrets
            securityContext: &sc
              readOnlyRootFilesystem: true
              allowPrivilegeEscalation: false
              capabilities:
                drop: ["ALL"]
            resources:
              requests:
                cpu: 10m
                memory: 512Mi
              limits:
                cpu: 3000m
                memory: 1536Mi
            probes:
              liveness:
                enabled: true
              readiness:
                enabled: true
              #startup:
              #  enabled: true
    service:
      gotosocial:
        controller: gotosocial
        ports:
          http:
            port: 8080
            protocol: HTTP
            appProtocol: http
    ingress:
      main:
        className: nginx-internal # public traffic goes direct via cloudflared
        annotations:
          external-dns.alpha.kubernetes.io/target: "${DNS_CF}"
          external-dns.alpha.kubernetes.io/cloudflare-proxied: "true"
        hosts:
          - host: *host
            paths: &paths
              - path: /
                pathType: Prefix
                service:
                  identifier: gotosocial
                  port: http
        tls:
          - hosts: [*host]
            secretName: gotosocial-tls
    defaultPodOptions:
      automountServiceAccountToken: false
      enableServiceLinks: false
      hostAliases:
        - ip: "${APP_IP_AUTHENTIK:=127.0.0.1}"
          hostnames: ["${APP_DNS_AUTHENTIK:=authentik}"]
      securityContext:
        runAsNonRoot: false # TODO: tmp migrate
        runAsUser: &uid 568
        runAsGroup: *uid
        fsGroup: *uid
        fsGroupChangePolicy: Always
        seccompProfile: { type: "RuntimeDefault" }
      topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: kubernetes.io/hostname
          whenUnsatisfiable: DoNotSchedule
          labelSelector:
            matchLabels:
              app.kubernetes.io/name: *app
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: fuckoff.home.arpa/gotosocial
                    operator: DoesNotExist
