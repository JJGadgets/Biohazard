---
apiVersion: helm.toolkit.fluxcd.io/v2beta2
kind: HelmRelease
metadata:
  name: &app gotosocial
  namespace: *app
spec:
  interval: 5m
  chart:
    spec:
      chart: app-template
      version: "2.5.0"
      sourceRef:
        name: bjw-s
        kind: HelmRepository
        namespace: flux-system
  values:
    controllers:
      main:
        type: deployment
        replicas: 1
        pod:
          labels:
            ingress.home.arpa/nginx-internal: "allow"
            ingress.home.arpa/cloudflare: "allow"
            db.home.arpa/pg: "pg-gotosocial"
            s3.home.arpa/store: "rgw-${CLUSTER_NAME}"
            authentik.home.arpa/https: "allow"
            egress.home.arpa/internet: "allow"
            prom.home.arpa/kps: "allow"
        containers:
          main:
            image: &img
              repository: "jank.ing/jjgadgets/gotosocial"
              tag: "0.13.2@sha256:3de7c10da1eb45724aa552fe50239ac396a918dc09614881925826e43feb2a32"
            env:
              TZ: "${CONFIG_TZ}"
              GTS_APPLICATION_NAME: "The JJGadgets Hut"
              GTS_LANDING_PAGE_USER: "jj"
              GTS_HOST: &host "social.jjgadgets.tech"
              GTS_ACCOUNT_DOMAIN: "jjgadgets.tech"
              GTS_PROTOCOL: "http"
              GTS_PORT: &http "8080"
              GTS_TRUSTED_PROXIES: "${IP_POD_CIDR_V4}"
              GTS_ACCOUNTS_REGISTRATION_OPEN: "false"
              GTS_METRICS_ENABLED: "true"
              GTS_DB_TYPE: "postgres"
              GTS_DB_TLS_MODE: "enable"
              GTS_DB_ADDRESS:
                valueFrom:
                  secretKeyRef:
                    name: &pgsec "pg-gotosocial-pguser-gotosocial"
                    key: "pgbouncer-host"
              GTS_DB_DATABASE:
                valueFrom:
                  secretKeyRef:
                    name: *pgsec
                    key: "dbname"
              GTS_DB_USER:
                valueFrom:
                  secretKeyRef:
                    name: *pgsec
                    key: "user"
              GTS_DB_PASSWORD:
                valueFrom:
                  secretKeyRef:
                    name: *pgsec
                    key: "password"
              #GTS_STORAGE_LOCAL_BASE_PATH: &media "/gotosocial/storage"
              GTS_STORAGE_BACKEND: "s3"
              GTS_STORAGE_S3_PROXY: "true"
              GTS_STORAGE_S3_USE_SSL: "false"
              GTS_STORAGE_S3_ENDPOINT: "rook-ceph-rgw-${CLUSTER_NAME}.rook-ceph.svc.cluster.local.:6953"
              GTS_STORAGE_S3_BUCKET: "gotosocial-media"
              GTS_STORAGE_S3_ACCESS_KEY:
                valueFrom:
                  secretKeyRef:
                    name: &s3sec "gotosocial-media-s3"
                    key: "AWS_ACCESS_KEY_ID"
              GTS_STORAGE_S3_SECRET_KEY:
                valueFrom:
                  secretKeyRef:
                    name: *s3sec
                    key: "AWS_SECRET_ACCESS_KEY"
              GTS_OIDC_ENABLED: "true"
              GTS_OIDC_IDP_NAME: "JJGadgets Auth"
              GTS_OIDC_ISSUER:
                valueFrom:
                  secretKeyRef:
                    name: &oidc "gotosocial-secrets"
                    key: "GTS_OIDC_ISSUER"
              GTS_OIDC_CLIENT_ID:
                valueFrom:
                  secretKeyRef:
                    name: *oidc
                    key: "GTS_OIDC_CLIENT_ID"
              GTS_OIDC_CLIENT_SECRET:
                valueFrom:
                  secretKeyRef:
                    name: *oidc
                    key: "GTS_OIDC_CLIENT_SECRET"
            securityContext: &sc
              readOnlyRootFilesystem: true
              allowPrivilegeEscalation: false
              capabilities:
                drop: ["ALL"]
            resources:
              requests:
                cpu: "10m"
                memory: "512Mi"
              limits:
                cpu: "3000m"
                memory: "1.5Gi"
    service:
      main:
        ports:
          http:
            port: *http
    ingress:
      main:
        enabled: true
        primary: true
        className: "nginx-public"
        annotations:
          external-dns.alpha.kubernetes.io/target: "${SECRET_CLOUDFLARE_TUNNEL_ID}.cfargotunnel.com"
          external-dns.alpha.kubernetes.io/cloudflare-proxied: "true"
        hosts:
          - host: *host
            paths: &paths
              - path: /
                pathType: Prefix
                service:
                  name: main
                  port: http
        tls:
          - hosts: [*host]
    defaultPodOptions:
      automountServiceAccountToken: false
      enableServiceLinks: false
      securityContext:
        runAsNonRoot: true
        runAsUser: &uid 568
        runAsGroup: *uid
        fsGroup: *uid
        fsGroupChangePolicy: "Always"
        seccompProfile: { type: "RuntimeDefault" }
      hostAliases:
        - ip: "${APP_IP_AUTHENTIK}"
          hostnames:
            - "${APP_DNS_AUTHENTIK}"
      topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: "kubernetes.io/hostname"
          whenUnsatisfiable: "DoNotSchedule"
          labelSelector:
            matchLabels:
              app.kubernetes.io/name: *app
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: "fuckoff.home.arpa/gotosocial"
                    operator: "DoesNotExist"
    serviceMonitor:
      main:
        enabled: true