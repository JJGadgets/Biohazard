---
substitutions:
  area: "$${area}"
  name: "$${name}"
  area_id: "$${area_id}"
  area_dns: "$${area_dns}"
  name_dns: "$${name_dns}"
  climate_id: "aircon_$${area_id}"
  description: "Mitsubishi CN105 compatible ESP32 serial air conditioner controller for $${area}"
packages:
  common: !include
    file: ./.common.yaml
    vars:
      board: "$${board | default('lolin_s3_mini')}"
  wifi: !include
    file: ./.wifi.yaml
    vars:
      wifi_ip: "$${wifi_ip}"
#   mqtt: !include
#     file: ./.mqtt.yaml
#     vars:
#       mqtt_username: !secret mqtt_cn105_username
#       mqtt_password: !secret mqtt_cn105_password
#       mqtt_prefix: "cn105/$${area_dns}"

# Mitsubishi CN105 air conditioner controller
external_components:
  - source: github://echavet/MitsubishiCN105ESPHome
climate: # Climate entity config
  - platform: cn105
    id: "$${climate_id}"
    name: "Air Conditioner - $${area}"
    icon: mdi:air-conditioner
    update_interval: 2s # update interval can be adjusted after a first run and logs monitoring
    visual:
      min_temperature: 16
      max_temperature: 28
      temperature_step: 1
    compressor_frequency_sensor:
      name: Compressor Frequency
      entity_category: diagnostic
      disabled_by_default: false
    vertical_vane_select:
      name: Vertical Vane
      disabled_by_default: false
    # horizontal_vane_select:
    #   name: Horizontal Vane
    #   disabled_by_default: true
    # isee_sensor:
    #   name: ISEE Sensor
    #   disabled_by_default: true
    # stage_sensor:
    #   name: Stage
    #   # use_as_operating_fallback: false     # set to true if your unit doesn't provide activity indicator
    #   entity_category: diagnostic
    #   disabled_by_default: true
    # sub_mode_sensor:
    #   name: Sub Mode
    #   entity_category: diagnostic
    #   disabled_by_default: true
    # auto_sub_mode_sensor:
    #   name: Auto Sub Mode
    #   entity_category: diagnostic
    #   disabled_by_default: true
uart:
  id: HP_UART
  baud_rate: 2400
  # TX and RX have to be inverted from pinout
  tx_pin: "$${tx_pin | default('GPIO44')}"
  rx_pin: "$${rx_pin | default('GPIO43')}"
# feed current temperature from HASS sensor
sensor:
  - platform: homeassistant
    name: "Remote Temperature Sensor"
    entity_id: "$${hass_temp_sensor}" # Replace with your HomeAssistant remote sensor entity id, or include in substitutions
    # internal: false # idk why example uses this
    # disabled_by_default: true
    device_class: temperature
    state_class: measurement
    unit_of_measurement: "Â°C"
    filters:
      - clamp: # Limits values to range accepted by Mitsubishi units
          min_value: 1
          max_value: 40
          ignore_out_of_range: true
      - throttle: 30s
    on_value:
      then:
        - if:
            condition:
              lambda: "return id(remote_temp_switch).state;"
            then:
              - logger.log:
                  level: INFO
                  format: "Remote temperature received from HA: %.1f C"
                  args: ["x"]
              - lambda: "id($${climate_id}).set_remote_temperature(x);"
switch:
  - platform: template
    name: "Enable Remote Temperature (default $${remote_temp_enable})"
    id: remote_temp_switch
    restore_mode: "RESTORE_DEFAULT_$${remote_temp_enable}"
    optimistic: true
    turn_off_action:
      - delay: 2s
      - logger.log:
          level: INFO
          format: "Remote temperature disabled, setting to 0 to revert to internal temperature"
      - lambda: "id($${climate_id}).set_remote_temperature(0);"
# logger:
#   logs:
#     CYCLE: WARN
