---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/app-template-3.7.3/charts/other/app-template/schemas/helmrelease-helm-v2beta2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app piped
  namespace: *app
spec:
  interval: 5m
  chart:
    spec:
      chart: app-template
      version: 3.7.3
      sourceRef:
        name: bjw-s
        kind: HelmRepository
        namespace: flux-system
  values:
    controllers:
      frontend:
        type: deployment
        replicas: 1
        strategy: RollingUpdate
        pod:
          labels:
            ingress.home.arpa/nginx-internal: allow
        containers:
          main:
            image: &img
              repository: ghcr.io/bjw-s-labs/piped-frontend
              tag: 2025.3.17@sha256:8ed05c7df0bc8899e54a3952a99b63d55cdc7669d759beeb9370fbb32330468b
            env: &env
              TZ: "${CONFIG_TZ}"
              BACKEND_HOSTNAME: "${APP_DNS_PIPED_BACKEND:=piped}"
            securityContext: &sc
              readOnlyRootFilesystem: true
              allowPrivilegeEscalation: false
              capabilities:
                drop: ["ALL"]
            resources:
              requests:
                cpu: "10m"
              limits:
                cpu: "1"
                memory: "128Mi"
            probes: &probes
              liveness:
                enabled: true
              readiness:
                enabled: true
              #startup:
              #  enabled: true
      backend:
        type: deployment
        replicas: 1
        strategy: RollingUpdate
        pod:
          labels:
            ingress.home.arpa/nginx-internal: allow
            ingress.home.arpa/cloudflare: allow
            db.home.arpa/pg: pg-default
            # s3.home.arpa/store: "rgw-${CLUSTER_NAME}"
            egress.home.arpa/internet: allow
        containers:
          main:
            image: &img
              repository: docker.io/1337kavin/piped
              tag: latest@sha256:121d56e14a3eccfc107cf5bab084772ba16b395e243b65076a6fa73f8fa0e8b2
            env: *env
            securityContext: *sc
            probes: *probes
            resources:
              requests:
                cpu: "10m"
              limits:
                cpu: "1"
                memory: "1Gi"
      ytproxy:
        type: deployment
        replicas: 1
        strategy: RollingUpdate
        pod:
          labels:
            ingress.home.arpa/nginx-internal: allow
            egress.home.arpa/internet: allow
        containers:
          main:
            image: &img
              repository: docker.io/1337kavin/piped-proxy
              tag: latest@sha256:7ac94bd379361e83889ecadcbe4e1d924b7f5a5a4d3fc58d73677664e61be9d4
            command: ["/app/piped-proxy"]
            env: *env
            securityContext: *sc
            probes: *probes
            resources:
              requests:
                cpu: "10m"
              limits:
                cpu: "1"
                memory: "256Mi"
      # refresh: # TODO: got rate limited from this
      #   type: cronjob
      #   cronjob:
      #     schedule: "@hourly"
      #     concurrencyPolicy: Forbid
      #     successfulJobsHistory: 0
      #     failedJobsHistory: 1
      #   pod:
      #     labels:
      #       db.home.arpa/pg: pg-default
      #   containers:
      #     main:
      #       image: &img
      #         repository: ghcr.io/bjw-s-labs/piped-scripts
      #         tag: 0.0.1@sha256:55dcbc2d65eb47d7a7f2c49c4fba1bc05ab3a715ae5b3f63a9653d804c704e69
      #       env:
      #         SCRIPT_NAME: update_subscriptions.sh
      #         PIPED_BACKEND: http://piped-backend.piped.svc.cluster.local:8080
      #       envFrom:
      #         - secretRef:
      #             name: piped-secrets
      #       securityContext: *sc
      #       resources:
      #         requests:
      #           cpu: "10m"
      #         limits:
      #           cpu: "1"
      #           memory: "128Mi"
    service:
      frontend:
        controller: frontend
        ports:
          http:
            port: 8080
            protocol: HTTP
            appProtocol: http
      backend:
        controller: backend
        ports:
          http:
            port: 8080
            protocol: HTTP
            appProtocol: http
      ytproxy:
        controller: ytproxy
        ports:
          http:
            port: 8080
            protocol: HTTP
            appProtocol: http
    ingress:
      main:
        className: nginx-internal
        annotations: &cors
          external-dns.alpha.kubernetes.io/target: "${DNS_CF:=127.0.0.1}" # cloudflared handles proxying to backend pod directly, exposed for webhook
          external-dns.alpha.kubernetes.io/cloudflare-proxied: "true"
          nginx.ingress.kubernetes.io/enable-cors: "true"
          nginx.ingress.kubernetes.io/cors-allow-origin: "https://${APP_DNS_PIPED:=piped}, https://${APP_DNS_PIPED_BACKEND}, https://${APP_DNS_PIPED_YTPROXY}"
        hosts:
          - host: &host "${APP_DNS_PIPED:=piped}"
            paths: &paths
              - path: /
                pathType: Prefix
                service:
                  identifier: frontend
                  port: http
          - host: "${APP_DNS_PIPED_BACKEND:=pipedbackend}"
            paths:
              - path: /
                pathType: Prefix
                service:
                  identifier: backend
                  port: http
          - host: "${APP_DNS_PIPED_YTPROXY:=pipedytproxy}"
            paths:
              - path: /
                pathType: Prefix
                service:
                  identifier: ytproxy
                  port: http
        tls:
          - hosts: [*host]
      # frontend:
      #   className: nginx-internal
      #   annotations: &cors
      #     nginx.ingress.kubernetes.io/enable-cors: "true"
      #     nginx.ingress.kubernetes.io/cors-allow-origin: "https://${APP_DNS_PIPED:=piped}"
      #   hosts:
      #     - host: &host "${APP_DNS_PIPED:=piped}"
      #       paths: &paths
      #         - path: /
      #           pathType: Prefix
      #           service:
      #             identifier: frontend
      #             port: http
      #   tls:
      #     - hosts: [*host]
      # backend:
      #   className: nginx-internal
      #   annotations:
      #     <<: *cors
      #     external-dns.alpha.kubernetes.io/target: "${DNS_CF:=cf}" # cloudflared handles proxying to backend pod directly
      #     external-dns.alpha.kubernetes.io/cloudflare-proxied: "true"
      #     nginx.ingress.kubernetes.io/use-regex: "true"
      #     nginx.ingress.kubernetes.io/rewrite-target: /$2
      #   hosts:
      #     - host: *host
      #       paths: &paths
      #         - path: /server(/|$)(.*)
      #           pathType: ImplementationSpecific
      #           service:
      #             identifier: backend
      #             port: http
      #   tls:
      #     - hosts: [*host]
      # ytproxy:
      #   className: nginx-internal
      #   annotations:
      #     <<: *cors
      #     nginx.ingress.kubernetes.io/use-regex: "true"
      #     nginx.ingress.kubernetes.io/rewrite-target: /$2
      #   hosts:
      #     - host: *host
      #       paths: &paths
      #         - path: /ytproxy(/|$)(.*)
      #           pathType: ImplementationSpecific
      #           service:
      #             identifier: ytproxy
      #             port: http
      #   tls:
      #     - hosts: [*host]
      # ytproxy-api:
      #   className: nginx-internal
      #   annotations: *cors
      #   hosts:
      #     - host: *host
      #       paths: &paths
      #         - &path
      #           path: /api
      #           pathType: Prefix
      #           service:
      #             identifier: ytproxy
      #             port: http
      #         - <<: *path
      #           path: /videoplayback
      #   tls:
      #     - hosts: [*host]
    persistence:
      config:
        type: secret
        name: piped-secrets
        advancedMounts:
          backend:
            main:
              - subPath: config.properties
                path: /app/config.properties
      tmp:
        type: emptyDir
        medium: Memory
        advancedMounts:
          backend:
            main:
              - subPath: tmp
                path: /tmp
    defaultPodOptions:
      automountServiceAccountToken: false
      enableServiceLinks: false
      hostAliases:
        - ip: "${APP_IP_AUTHENTIK:=127.0.0.1}"
          hostnames: ["${APP_DNS_AUTHENTIK:=authentik}"]
      dnsConfig:
        options:
          - name: ndots
            value: "1"
      securityContext:
        runAsNonRoot: true
        runAsUser: &uid ${APP_UID_PIPED:=1000}
        runAsGroup: *uid
        fsGroup: *uid
        fsGroupChangePolicy: Always
        seccompProfile: { type: "RuntimeDefault" }
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: fuckoff.home.arpa/piped
                    operator: DoesNotExist
    networkpolicies:
      same-ns:
        podSelector: {}
        policyTypes: [Ingress, Egress]
        rules:
          ingress: [from: [{podSelector: {}}]]
          egress: [to: [{podSelector: {}}]]
