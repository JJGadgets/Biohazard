---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/app-template-3.6.1/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app jellyfin
  namespace: media
spec:
  interval: 5m
  chart:
    spec:
      chart: app-template
      version: 3.7.1
      sourceRef:
        name: bjw-s
        kind: HelmRepository
        namespace: flux-system
  values:
    controllers:
      jellyfin:
        type: deployment
        replicas: 1
        pod:
          labels:
            ingress.home.arpa/nginx-internal: "allow"
            ingress.home.arpa/nginx-external: "allow"
            egress.home.arpa/internet: "allow"
            egress.home.arpa/dlna: "allow"
            authentik.home.arpa/ldap: "allow"
            egress.home.arpa/r2: "allow"
            tailscale.com/expose: "true"
        containers:
          main:
            image: &img
              repository: "docker.io/jellyfin/jellyfin"
              tag: "10.8.13-1@sha256:41fc4f9a51f638930bf16eace81acacbafaf26436d0efc0b0edd9447cb134a2c"
            env:
              TZ: "${CONFIG_TZ}"
            securityContext:
              readOnlyRootFilesystem: true
              allowPrivilegeEscalation: false
              capabilities:
                drop: ["ALL"]
            resources:
              requests:
                cpu: "10m"
                memory: "2Gi"
              limits:
                cpu: "3000m"
                memory: "6Gi"
                gpu.intel.com/i915: "1"
            probes:
              liveness:
                enabled: true
              readiness:
                enabled: true
    service:
      jellyfin:
        controller: jellyfin
        ports:
          http:
            port: 8096
            protocol: HTTP
            appProtocol: http
    ingress:
      main:
        className: nginx-external
        annotations:
          external-dns.alpha.kubernetes.io/target: "${DNS_CF:=cf}"
          external-dns.alpha.kubernetes.io/cloudflare-proxied: "true"
        hosts:
          - host: &host "${APP_DNS_JELLYFIN:=jellyfin}"
            paths: &paths
              - path: /
                pathType: Prefix
                service:
                  identifier: jellyfin
                  port: http
        tls:
          - hosts: [*host]
    persistence:
      config:
        existingClaim: jellyfin-data
      transcode:
        type: emptyDir
      tmp:
        type: emptyDir
        medium: Memory
        sizeLimit: 128Mi
      media:
        existingClaim: "media-data" # VolSync
        globalMounts:
          - path: "/ceph"
            readOnly: true
      nfs:
        type: nfs
        server: "${IP_TRUENAS:=127.0.0.1}"
        path: "${PATH_NAS_MEDIA:=/media}"
        globalMounts:
          - path: /media
            readOnly: true
    defaultPodOptions:
      automountServiceAccountToken: false
      enableServiceLinks: false
      hostAliases:
        - ip: "${APP_IP_AUTHENTIK:=127.0.0.1}"
          hostnames: ["${APP_DNS_AUTHENTIK:=authentik}"]
      dnsConfig:
        options:
          - name: ndots
            value: "1"
      hostUsers: true # NFS doesn't support idmap?
      securityContext:
        runAsNonRoot: true
        runAsUser: &uid 568
        runAsGroup: *uid
        fsGroup: *uid
        fsGroupChangePolicy: Always
        supplementalGroups:
          - 44 # iGPU
          - 6969 # NAS NFS media share user
        seccompProfile: { type: "RuntimeDefault" }
      topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: kubernetes.io/hostname
          whenUnsatisfiable: DoNotSchedule
          labelSelector:
            matchLabels:
              app.kubernetes.io/name: *app
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: fuckoff.home.arpa/jellyfin
                    operator: DoesNotExist
