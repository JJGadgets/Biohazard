---
apiVersion: helm.toolkit.fluxcd.io/v2beta2
kind: HelmRelease
metadata:
  name: &app ocis
  namespace: *app
spec:
  interval: 5m
  chart:
    spec:
      chart: app-template
      version: "2.6.0"
      sourceRef:
        name: bjw-s
        kind: HelmRepository
        namespace: flux-system
  values:
    controllers:
      main:
        type: deployment
        replicas: 1
        pod:
          labels:
            ingress.home.arpa/nginx-internal: "allow"
        containers:
          main: &ct
            image: &img
              repository: "docker.io/owncloud/ocis"
              tag: "5.0.2@sha256:4b8545200dce57538cff90c25e054e5244ec619f55c7f6f00e61eeb08e057372"
            command: ["ocis", "server"]
            env:
              TZ: "${CONFIG_TZ}"
              OCIS_INSECURE: true
              OCIS_URL: "https://${APP_DNS_OCIS}"
              PROXY_TLS: false
              DEMO_USERS: false
              PROXY_HTTP_ADDR: 0.0.0.0:9200
              OCIS_LOG_LEVEL: info
              OCIS_LOG_COLOR: true
              OCIS_LOG_PRETTY: true
              PROXY_DEBUG_ADDR: 0.0.0.0:9205
              STORAGE_USERS_OCIS_ROOT: /data
              #NOTIFICATIONS_SMTP_HOST: "${SMTP_RELAY_HOST}"
              #NOTIFICATIONS_SMTP_PORT: "${SMTP_RELAY_PORT}"
              #NOTIFICATIONS_SMTP_SENDER: "${SECRET_SMTP_FROM_FULL}"
              #NOTIFICATIONS_SMTP_INSECURE: true
              OCIS_OIDC_ISSUER: "https://${APP_DNS_AUTHENTIK}/application/o/ocis/"
              WEB_OIDC_METADATA_URL: "https://${APP_DNS_AUTHENTIK}/application/o/ocis/.well-known/openid-configuration"
              WEB_OIDC_CLIENT_ID:
                valueFrom:
                  secretKeyRef:
                    name: "ocis-secrets"
                    key: "WEB_OIDC_CLIENT_ID"
              PROXY_OIDC_ACCESS_TOKEN_VERIFY_METHOD: jwt
              # Use upstream OIDC provider's .well-known instead of oCIS's, needed for mobile clients to use external OIDC
              PROXY_OIDC_REWRITE_WELLKNOWN: true
              # Auto role assignment
              # docs: https://doc.owncloud.com/ocis/next/deployment/services/s-list/proxy.html#automatic-role-assignments
              PROXY_AUTOPROVISION_ACCOUNTS: true
              WEB_OIDC_SCOPE: "openid profile email groups"
              PROXY_USER_OIDC_CLAIM: "preferred_username"
              PROXY_ROLE_ASSIGNMENT_DRIVER: oidc
              PROXY_ROLE_ASSIGNMENT_OIDC_CLAIM: groups
              # I'm using the default role mapping here https://doc.owncloud.com/ocis/5.0/deployment/services/s-list/proxy.html#automatic-role-assignments
            envFrom:
              - secretRef:
                  name: "ocis-secrets"
            securityContext: &sc
              readOnlyRootFilesystem: true
              allowPrivilegeEscalation: false
              capabilities:
                drop: ["ALL"]
            resources:
              requests:
                cpu: "10m"
                memory: "1Gi"
              limits:
                cpu: "3000m"
                memory: "6Gi"
    service:
      main:
        ports:
          http:
            port: 9200
    ingress:
      main:
        enabled: true
        primary: true
        className: "nginx-internal"
        hosts:
          - host: &host "${APP_DNS_OCIS}"
            paths: &paths
              - path: /
                pathType: Prefix
                service:
                  name: main
                  port: http
        tls:
          - hosts: [*host]
    persistence:
      config:
        enabled: false
      data:
        enabled: true
        existingClaim: "ocis-data"
        globalMounts:
          - subPath: "data"
            path: "/data"
          - subPath: "config"
            path: "/etc/ocis"
          - subPath: "varlib"
            path: "/var/lib/ocis"
    defaultPodOptions:
      automountServiceAccountToken: false
      enableServiceLinks: false
      securityContext:
        runAsNonRoot: true
        runAsUser: &uid ${APP_UID_OCIS}
        runAsGroup: *uid
        fsGroup: *uid
        fsGroupChangePolicy: "Always"
        seccompProfile: { type: "RuntimeDefault" }
      topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: "kubernetes.io/hostname"
          whenUnsatisfiable: "DoNotSchedule"
          labelSelector:
            matchLabels:
              app.kubernetes.io/name: *app
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: "fuckoff.home.arpa/ocis"
                    operator: "DoesNotExist"
