---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/app-template-4.1.2/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app rclone-retro
  namespace: *app
spec:
  interval: 5m
  chart:
    spec:
      chart: app-template
      version: 4.1.2
      sourceRef:
        name: bjw-s
        kind: HelmRepository
        namespace: flux-system
  values:
    controllers:
      app:
        type: deployment
        replicas: 1
        pod:
          labels:
            ingress.home.arpa/nginx-internal: allow
            prom.home.arpa/kps: allow
            egress.home.arpa/retro-consoles: allow
            egress.home.arpa/github: allow
        containers:
          app:
            image: &img
              repository: ghcr.io/rclone/rclone
              tag: 1.70.2@sha256:b8dad82933961be28ebbe4aab87e14f2d2fcd23ed3e8335a43a837209cb46f5f
            args: ["serve", "ftp", "/data", "--addr=:$(FTP_PORT)", "--log-level=DEBUG", "--rc", "--rc-addr=:$(HTTP_PORT)", "--rc-serve", "--rc-serve-no-modtime", "--rc-web-gui", "--rc-web-gui-no-open-browser", "--rc-user=$(RC_USER)", "--rc-pass=$(RC_PASS)", "--rc-enable-metrics", "--metrics-addr=:$(METRICS_PORT)"]
            env: &env
              TZ: "${CONFIG_TZ}"
              FTP_PORT: &ftp 2121
              HTTP_PORT: &http 8080
              METRICS_PORT: &metrics 9090
            envFrom: &envFrom
              - secretRef:
                  name: rclone-retro-secrets
            securityContext: &sc
              readOnlyRootFilesystem: true
              allowPrivilegeEscalation: false
              capabilities:
                drop: ["ALL"]
            resources:
              requests:
                cpu: "10m"
              limits:
                cpu: "1"
                memory: "128Mi"
            probes:
              liveness:
                enabled: true
              readiness:
                enabled: true
      3ds: &cron
        type: cronjob
        cronjob:
          schedule: "@hourly"
        containers:
          main: &rclct
            image: *img
            args: ["rc", "sync/sync", "3ds:/", "/data/3ds/", "_filter='{$(FILTER)}'", "_config='{$(CONFIG)}'"]
            env:
              <<: *env
              FILTER: |
                "IncludeRule": [ "/Nintendo 3DS/title/**/**/content/*.app", "**/*.cia", "**/*.fbi", "**/*.nds", "/GBA/**", "/GBA/*", "**/*.mp3", "**/*.m4a", "**/*.aac", "**/*.wav", "**/*.flac" ]
              CONFIG: |
                "Progress": true
            envFrom: *envFrom
            securityContext: *sc
            resources:
              requests:
                cpu: "10m"
              limits:
                cpu: "1"
                memory: "128Mi"
      3ds-gba:
        <<: *cron
        containers:
          main:
            <<: *rclct
            args: ["rc", "sync/sync", "3ds:GBA/", "/data/3ds-gba/", "_config='{$(CONFIG)}'"]
            env:
              <<: *env
              FILTER: |
                "IncludeRule": [ "**/*.nds", "**/*.mp3", "**/*.m4a", "**/*.aac", "**/*.wav", "**/*.flac" ]
              CONFIG: |
                "Progress": true
      ds:
        <<: *cron
        containers:
          main:
            <<: *rclct
            args: ["rc", "sync/sync", "ds:/", "/data/ds/", "_filter='{$(FILTER)}'", "_config='{$(CONFIG)}'"]
            env:
              <<: *env
              FILTER: |
                "IncludeRule": [ "**/*.nds", "**/*.mp3", "**/*.m4a", "**/*.aac", "**/*.wav", "**/*.flac" ]
              CONFIG: |
                "Progress": true
    service:
      app:
        controller: app
        ports:
          http:
            port: 80
            targetPort: *http
            protocol: HTTP
            appProtocol: http
      expose:
        controller: app
        type: LoadBalancer
        annotations:
          coredns.io/hostname: "${APP_DNS_RCLONE_RETRO_FTP:=rclone-retro}"
          lbipam.cilium.io/ips: "${APP_IP_RCLONE_RETRO_FTP:=127.0.0.1}"
        ports:
          ftp:
            port: 21
            targetPort: *ftp
            protocol: TCP
            appProtocol: ftp
            primary: true
    ingress:
      main:
        className: nginx-internal
        annotations:
          nginx.ingress.kubernetes.io/whitelist-source-range: "${IP_JJ_V4:=127.0.0.1/32}"
        hosts:
          - host: &host "${APP_DNS_RCLONE_RETRO:=rclone-retro}"
            paths: &paths
              - path: /
                pathType: Prefix
                service:
                  identifier: app
                  port: http
        tls:
          - hosts: [*host]
    persistence:
      config:
        type: configMap
        identifier: config
        globalMounts:
          - subPath: "rclone.conf"
            path: "/.rclone.conf"
            readOnly: true
      data:
        existingClaim: rclone-retro-data
        globalMounts:
          - subPath: data
            path: /data
          - subPath: cache
            path: /.cache
      # nfs:
      #   type: nfs
      #   server: "${IP_TRUENAS:=127.0.0.1}"
      #   path: "${PATH_NAS_PERSIST_K8S:=/home}"
      #   globalMounts:
      #     - subPath: rclone-retro
      #       path: /nfs
      tmp:
        type: emptyDir
        medium: Memory
        globalMounts:
          - subPath: tmp
            path: /tmp
    configMaps:
      config:
        data:
          rclone.conf: |
            [3ds]
            type = ftp
            host = 3ds.internal
            port = 5000
            user = anonymous
            pass = PyY5-F-6MhsVR9BYdBGEQy0
            concurrency = 1
            idle_timeout = 0s
            writing_mdtm = true
            # needed for modtime support, use `rclone backend features 3ds:` to verify
            [ds]
            type = ftp
            host = ds.internal
            port = 5000
            user = anonymous
            pass = PyY5-F-6MhsVR9BYdBGEQy0
            concurrency = 1
            idle_timeout = 0s
            writing_mdtm = true
            # needed for modtime support, use `rclone backend features ds:` to verify
            [vita]
            type = ftp
            host = 3ds.internal
            port = 5000
            user = anonymous
            pass = PyY5-F-6MhsVR9BYdBGEQy0
            concurrency = 1
            idle_timeout = 0s
            writing_mdtm = true
    defaultPodOptions:
      automountServiceAccountToken: false
      enableServiceLinks: false
      hostAliases:
        - ip: "${APP_IP_AUTHENTIK:=127.0.0.1}"
          hostnames: ["${APP_DNS_AUTHENTIK:=authentik}"]
      dnsConfig:
        options:
          - name: ndots
            value: "1"
      hostUsers: false
      securityContext:
        runAsNonRoot: true
        runAsUser: &uid 1000
        runAsGroup: *uid
        fsGroup: *uid
        fsGroupChangePolicy: Always
        seccompProfile: { type: "RuntimeDefault" }
      topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: kubernetes.io/hostname
          whenUnsatisfiable: DoNotSchedule
          labelSelector:
            matchLabels:
              app.kubernetes.io/name: "{{ .Release.Name }}"
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: "fuckoff.home.arpa/{{ .Release.Name }}"
                    operator: DoesNotExist
    networkpolicies:
      same-ns:
        podSelector: {}
        policyTypes: [Ingress, Egress]
        rules:
          ingress: [from: [{podSelector: {}}]]
          egress: [to: [{podSelector: {}}]]
      conosoles:
        controller: app
        policyTypes: [Ingress, Egress]
        rules:
          ingress:
            - from: &consoles
                - ipBlock:
                    cidr: "${IP_VLAN_RETROCONSOLES_CIDR:=127.0.0.1/32}"
                - ipBlock:
                    cidr: "${IP_VLAN_NDS_CIDR:=127.0.0.1/32}"
            # from: [{ podSelector: {} }]]
          egress:
            - to: *consoles
    # serviceMonitor: # TODO: add serviceMonitors
