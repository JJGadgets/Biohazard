---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/app-template-4.1.2/charts/other/app-template/schemas/helmrelease-helm-v2beta2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app authentik
  namespace: *app
spec:
  interval: 5m
  chart:
    spec:
      chart: app-template
      version: 4.1.2
      sourceRef:
        name: bjw-s
        kind: HelmRepository
        namespace: flux-system
  values:
    controllers:
      app:
        type: deployment
        replicas: 2
        strategy: RollingUpdate
        rollingUpdate:
          unavailable: "90%"
        pod:
          labels:
            ingress.home.arpa/nginx-external: allow
            ingress.home.arpa/nginx-internal: allow
            ingress.home.arpa/nginx-public: allow
            egress.home.arpa/nginx-external: allow
            egress.home.arpa/nginx-internal: allow
            egress.home.arpa/nginx-public: allow
            db.home.arpa/pg: pg-authentik
            s3.home.arpa/store: "rgw-${CLUSTER_NAME}"
            prom.home.arpa/kps: allow
            # for OIDC sources
            egress.home.arpa/discord: allow
            egress.home.arpa/github: allow
          resources:
            requests:
              cpu: 30m
            limits:
              cpu: "1"
              memory: 900Mi
          topologySpreadConstraints:
            - &tsc
              maxSkew: 1
              topologyKey: kubernetes.io/hostname
              whenUnsatisfiable: DoNotSchedule
              labelSelector:
                matchLabels:
                  app.kubernetes.io/name: *app
                  app.kubernetes.io/component: *app
        containers:
          app:
            image: &img
              repository: ghcr.io/goauthentik/server
              tag: 2025.6.4@sha256:acde6a1fc963301fe27f7e86facb9aefbc68eb523210bcab5679a899e6bf72d5
            args: [server]
            env: &env
              TZ: "${CONFIG_TZ}"
              # PostgreSQL
              AUTHENTIK_POSTGRESQL__HOST:
                valueFrom:
                  secretKeyRef:
                    name: pg-authentik-pguser-authentik
                    key: pgbouncer-host
                    # key: host
              AUTHENTIK_POSTGRESQL__PORT:
                valueFrom:
                  secretKeyRef:
                    name: pg-authentik-pguser-authentik
                    #key: pgbouncer-port
                    key: port
              AUTHENTIK_POSTGRESQL__NAME:
                valueFrom:
                  secretKeyRef:
                    name: pg-authentik-pguser-authentik
                    key: dbname
              AUTHENTIK_POSTGRESQL__USER:
                valueFrom:
                  secretKeyRef:
                    name: pg-authentik-pguser-authentik
                    key: user
              AUTHENTIK_POSTGRESQL__PASSWORD:
                valueFrom:
                  secretKeyRef:
                    name: pg-authentik-pguser-authentik
                    key: password
              AUTHENTIK_POSTGRESQL__SSLMODE: verify-ca
              AUTHENTIK_POSTGRESQL__SSLROOTCERT: &pgca /secrets/pg/ca.crt
              AUTHENTIK_SESSION_STORAGE: "db" # store sessions in PG than Redis
              # pgBouncer
              AUTHENTIK_POSTGRESQL__CONN_MAX_AGE: "0" # if not using pgBouncer, maybe setting this to null for unlimited persistent connections is a good idea: connection slots limit can be reached with authentik
              AUTHENTIK_POSTGRESQL__CONN_HEALTH_CHECKS: "true"
              AUTHENTIK_POSTGRESQL__DISABLE_SERVER_SIDE_CURSORS: "true"
              # KV cache
              AUTHENTIK_REDIS__HOST: authentik-redis.authentik.svc.cluster.local
              # media storage
              AUTHENTIK_STORAGE__MEDIA__BACKEND: "s3"
              AUTHENTIK_STORAGE__MEDIA__S3__USE_SSL: "true"
              AUTHENTIK_STORAGE__MEDIA__S3__SECURE_URLS: "true"
              # misc
              AUTHENTIK_LISTEN__TRUSTED_PROXY_CIDRS: "${IP_POD_CIDR_V4:=127.0.0.1/32}"
              AUTHENTIK_OUTPOSTS__DISCOVER: "false"
              # error reporting
              AUTHENTIK_ERROR_REPORTING__ENABLED: "false"
              AUTHENTIK_ERROR_REPORTING__SEND_PII: "false"
            envFrom: &envFrom
              - secretRef:
                  name: authentik-secrets
            securityContext: &sc
              readOnlyRootFilesystem: true
              allowPrivilegeEscalation: false
              capabilities:
                drop: ["ALL"]
            ports:
              - name: http
                containerPort: &http 9000
              - name: https
                containerPort: &https 9443
              - name: metrics
                containerPort: &metrics 9300
            probes:
              liveness: &probe
                enabled: true
                type: HTTP
                port: http
                path: "/-/health/live/"
              readiness:
                enabled: true
                type: HTTP
                port: http
                path: "/-/health/ready/"
              startup:
                <<: *probe
                enabled: true
                spec: &startup
                  periodSeconds: 1
                  failureThreshold: 300
                  initialDelaySeconds: 15
          anubis:
            image:
              repository: ghcr.io/xe/x/anubis
              tag: latest@sha256:a7b24490df79512a18a198dc44cd3d8a4ac3389ec91866ec9720d6293c2bdde7
            env:
              TZ: "${CONFIG_TZ}"
              BIND: ":8923"
              DIFFICULTY: "5"
              SERVE_ROBOTS_TXT: "true"
              TARGET: "http://127.0.0.1:9000"
            securityContext: *sc
            ports:
              - name: anubis
                containerPort: &anubis 8923
            probes:
              liveness:
                enabled: true
              readiness:
                enabled: true
      worker:
        type: deployment
        replicas: 2
        strategy: RollingUpdate
        rollingUpdate:
          unavailable: "90%"
        pod:
          labels:
            db.home.arpa/pg: pg-authentik
            s3.home.arpa/store: "rgw-${CLUSTER_NAME}"
            authentik.home.arpa/https: allow
            prom.home.arpa/kps: allow
            # egress.home.arpa/internet: allow
          topologySpreadConstraints:
            - <<: *tsc
              labelSelector:
                matchLabels:
                  app.kubernetes.io/name: *app
                  app.kubernetes.io/component: worker
        containers:
          app:
            image: *img
            args: [worker]
            env: *env
            envFrom: *envFrom
            securityContext: *sc
            resources:
              requests:
                cpu: 20m
              limits:
                cpu: "1"
                memory: 750Mi
            probes:
              liveness: &worker-probe
                enabled: true
                custom: true
                spec: &wps
                  exec:
                    command: ["ak", "healthcheck"]
              readiness: *worker-probe
              startup:
                <<: *worker-probe
                spec:
                  <<: [*startup, *wps]
      ldap:
        type: deployment
        replicas: 2
        strategy: RollingUpdate
        rollingUpdate:
          unavailable: "90%"
        pod:
          labels:
            authentik.home.arpa/https: allow
          topologySpreadConstraints:
            - <<: *tsc
              labelSelector:
                matchLabels:
                  app.kubernetes.io/name: *app
                  app.kubernetes.io/component: ldap
        containers:
          app:
            image:
              <<: *img
              repository: ghcr.io/goauthentik/ldap
              tag: 2025.6.4@sha256:bceb7718ae590d6c60cbc4f02cdd591d4d1cc763f5c44ab099059888462e4b43
            env:
              AUTHENTIK_HOST: "https://${APP_DNS_AUTHENTIK}"
              AUTHENTIK_TOKEN:
                valueFrom:
                  secretKeyRef:
                    name: authentik-tokens
                    key: AUTHENTIK_TOKEN_LDAP
            securityContext: *sc
            resources:
              requests:
                cpu: 10m
              limits:
                cpu: "1"
                memory: 50Mi
            probes:
              liveness: &ldap-probe
                enabled: true
                custom: true
                spec: &lps
                  exec:
                    command: ["/ldap", "healthcheck"]
              readiness: *ldap-probe
              startup:
                <<: *ldap-probe
                spec:
                  <<: [*startup, *lps]
      radius:
        type: deployment
        replicas: 2
        strategy: RollingUpdate
        rollingUpdate:
          unavailable: "90%"
        pod:
          labels:
            authentik.home.arpa/https: allow
          topologySpreadConstraints:
            - <<: *tsc
              labelSelector:
                matchLabels:
                  app.kubernetes.io/name: *app
                  app.kubernetes.io/component: radius
        containers:
          app:
            image:
              <<: *img
              repository: ghcr.io/goauthentik/radius
              tag: 2025.6.4@sha256:282aa5e085d42c6424f051ee668a44645408392a6602a93362f4f8b9c4731673
            env:
              AUTHENTIK_HOST: "https://${APP_DNS_AUTHENTIK}"
              AUTHENTIK_TOKEN:
                valueFrom:
                  secretKeyRef:
                    name: authentik-tokens
                    key: AUTHENTIK_TOKEN_RADIUS
            securityContext: *sc
            resources:
              requests:
                cpu: 10m
              limits:
                cpu: "1"
                memory: "50Mi"
            probes:
              liveness: &radius-probe
                enabled: true
                custom: true
                spec: &rps
                  exec:
                    command: ["/radius", "healthcheck"]
              readiness: *radius-probe
              startup:
                <<: *radius-probe
                spec:
                  <<: [*startup, *rps]
      redis:
        type: deployment
        replicas: 1
        containers:
          redis:
            image:
              repository: "public.ecr.aws/docker/library/redis"
              tag: "8.2.1@sha256:c81b61a54d0df965bac57d6fdb59f6c95a8eee9295332f289287e880d5a4a498"
            command: ["redis-server", "--save", "''", "--appendonly", "no", "--requirepass", "$(AUTHENTIK_REDIS__PASSWORD)"] # save and appendonly options forcibly disable RDB and AOF persistence entirely
            envFrom: *envFrom
            securityContext: *sc
            resources:
              requests:
                cpu: 5m
              limits:
                cpu: "1"
                memory: "32Mi"
            probes:
              liveness:
                enabled: true
              readiness:
                enabled: true
      # renovate-test:
      #   enabled: false
      #   type: deployment
      #   replicas: 0
      #   strategy: RollingUpdate
      #   rollingUpdate:
      #     unavailable: "90%"
      #   containers:
      #     main:
      #       image: &img
      #         repository: ghcr.io/goauthentik/server
      #         tag: 2024.12.5@sha256:717323d68507fb76dd79f8958f42ce57f8ae0c10a55a7807efa1cfec5752b77c
      #       args: [server]
      #       env: &env
      #         TZ: "${CONFIG_TZ}"
      #       securityContext: &sc
      #         readOnlyRootFilesystem: true
      #         allowPrivilegeEscalation: false
      #         capabilities:
      #           drop: ["ALL"]
      #       resources:
      #         requests:
      #           cpu: "0"
      #           memory: "0"
      #         limits:
      #           cpu: "1000m"
      #           memory: "2Gi"
      #     anubis:
      #       image:
      #         repository: ghcr.io/xe/x/anubis
      #         tag: latest@sha256:a7b24490df79512a18a198dc44cd3d8a4ac3389ec91866ec9720d6293c2bdde7
      #       env:
      #         TZ: "${CONFIG_TZ}"
      #         BIND: ":8923"
      #         DIFFICULTY: "5"
      #         SERVE_ROBOTS_TXT: "true"
      #         TARGET: "http://127.0.0.1:9000"
      #       securityContext: *sc
      #       resources:
      #         requests:
      #           cpu: "5m"
      #           memory: "32Mi"
      #         limits:
      #           cpu: "1"
      #           memory: "128Mi"
      #       ports:
      #         - name: anubis
      #           containerPort: &anubis 8923
      #       probes:
      #         liveness:
      #           enabled: true
      #         readiness:
      #           enabled: true
    service:
      app:
        controller: app
        forceRename: *app
        ports:
          http: &port
            port: *http
            protocol: HTTP
            appProtocol: http
          http-80:
            <<: *port
            port: 80
            targetPort: *http
          metrics:
            <<: *port
            port: *metrics
          anubis:
            <<: *port
            port: *anubis
      redis:
        primary: false
        controller: redis
        ports:
          redis:
            port: 6379
      expose:
        primary: false
        controller: app
        type: LoadBalancer
        annotations:
          io.cilium/internal: "true"
          io.cilium/lb-ipam-ips: "${APP_IP_AUTHENTIK:=127.0.0.1}"
        ports:
          http:
            port: 443
            targetPort: *https
            protocol: HTTPS
            appProtocol: https
      ldap:
        primary: false
        controller: ldap
        type: LoadBalancer
        annotations:
          coredns.io/hostname: "${APP_DNS_AUTHENTIK_LDAP:=authentik-ldap}"
          io.cilium/lb-ipam-ips: "${APP_IP_AUTHENTIK_LDAP:=127.0.0.1}"
        ports:
          ldap-tcp: &ldap
            port: 389
            targetPort: 3389
            protocol: TCP
            appProtocol: ldap
          ldap-udp:
            <<: *ldap
            protocol: UDP
          ldaps-tcp: &ldaps
            port: 636
            targetPort: 6636
            protocol: TCP
            appProtocol: ldaps
          ldaps-udp:
            <<: *ldaps
            protocol: UDP
      radius:
        primary: false
        controller: radius
        type: LoadBalancer
        annotations:
          coredns.io/hostname: "${APP_DNS_AUTHENTIK_RADIUS:=authentik-radius}"
          io.cilium/lb-ipam-ips: "${APP_IP_AUTHENTIK_RADIUS:=127.0.0.1}"
        ports:
          radius-tcp: &radius
            port: 1812
            protocol: TCP
            appProtocol: radius
          radius-udp:
            <<: *radius
            protocol: UDP
    ingress:
      internal: &ingress
        className: nginx-external
        annotations:
          nginx.ingress.kubernetes.io/whitelist-source-range: "10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16, 100.64.0.0/10"
        hosts:
          - host: &host "${APP_DNS_AUTHENTIK:=authentik}"
            paths:
              - &path
                path: /
                pathType: Prefix
                service:
                  identifier: app
                  port: http
        tls: &tls
          - hosts: [*host]
            secretName: authentik-tls
      external:
        <<: *ingress
        annotations:
          external-dns.alpha.kubernetes.io/target: "${DNS_CF:=cf}"
          external-dns.alpha.kubernetes.io/cloudflare-proxied: "true"
        hosts:
          - host: *host
            paths:
              - <<: *path
                service:
                  identifier: app
                  port: anubis
      harden:
        <<: *ingress
        annotations:
          nginx.ingress.kubernetes.io/whitelist-source-range: "${IP_JJ_V4:=127.0.0.1/32}"
        hosts:
          - host: *host
            paths:
              - <<: *path
                path: /api/v3/policies/expression
              - <<: *path
                path: /api/v3/propertymappings
              - <<: *path
                path: /api/v3/managed/blueprints
              - <<: *path
                path: /if/admin
    persistence:
      pg-ca:
        type: secret
        #name: pg-authentik-pgbouncer
        name: pg-authentik-cluster-cert
        defaultMode: 0400
        globalMounts:
          - subPath: ca.crt
            #subPath: pgbouncer-frontend.ca-roots
            path: *pgca
      tls:
        type: secret
        name: authentik-tls
        defaultMode: 0400
        globalMounts:
          - path: "/certs/${APP_DNS_AUTHENTIK}-k8s"
      tmp:
        type: emptyDir
        medium: Memory
        globalMounts:
          - path: "/media/public"
    defaultPodOptions:
      automountServiceAccountToken: false
      enableServiceLinks: false
      hostUsers: false
      hostAliases:
        - ip: "${APP_IP_AUTHENTIK:=127.0.0.1}"
          hostnames: ["${APP_DNS_AUTHENTIK:=authentik}"]
      securityContext:
        runAsNonRoot: true
        runAsUser: &uid 1000
        runAsGroup: *uid
        fsGroup: *uid
        fsGroupChangePolicy: Always
        seccompProfile: { type: "RuntimeDefault" }
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: fuckoff.home.arpa/authentik
                    operator: DoesNotExist
    networkpolicies:
      same-ns:
        podSelector: {}
        policyTypes: [Ingress, Egress]
        rules:
          ingress: [from: [{podSelector: {}}]]
          egress: [to: [{podSelector: {}}]]
      vm-ad:
        controller: worker
        policyTypes: [Egress]
        rules:
          egress: [to: [{ipBlock: {cidr: "${IP_AD_CIDR:=127.0.0.1/32}"}}]]
    serviceMonitor:
      authentik:
        service:
          identifier: app
        endpoints:
          - port: metrics
            scheme: http
            path: /metrics
            interval: 1m
            scrapeTimeout: 30s
