---
apiVersion: helm.toolkit.fluxcd.io/v2beta2
kind: HelmRelease
metadata:
  name: &app authentik
  namespace: *app
spec:
  interval: 5m
  chart:
    spec:
      chart: app-template
      version: 3.1.0
      sourceRef:
        name: bjw-s
        kind: HelmRepository
        namespace: flux-system
  values:
    controllers:
      authentik:
        type: deployment
        replicas: 2
        strategy: RollingUpdate
        rollingUpdate:
          unavailable: "90%"
        pod:
          labels:
            ingress.home.arpa/nginx-external: allow
            ingress.home.arpa/nginx-internal: allow
            ingress.home.arpa/nginx-public: allow
            egress.home.arpa/nginx-external: allow
            egress.home.arpa/nginx-internal: allow
            egress.home.arpa/nginx-public: allow
            db.home.arpa/pg: pg-authentik
            s3.home.arpa/store: "rgw-${CLUSTER_NAME}"
            prom.home.arpa/kps: allow
          topologySpreadConstraints:
            - &tsc
              maxSkew: 1
              topologyKey: kubernetes.io/hostname
              whenUnsatisfiable: DoNotSchedule
              labelSelector:
                matchLabels:
                  app.kubernetes.io/name: *app
                  app.kubernetes.io/component: *app
        containers:
          main:
            image: &img
              repository: ghcr.io/goauthentik/server
              tag: 2024.8.3
            args: [server]
            env: &env
              TZ: "${CONFIG_TZ}"
              AUTHENTIK_POSTGRESQL__HOST:
                valueFrom:
                  secretKeyRef:
                    name: pg-authentik-pguser-authentik
                    #key: pgbouncer-host
                    key: host
              AUTHENTIK_POSTGRESQL__PORT:
                valueFrom:
                  secretKeyRef:
                    name: pg-authentik-pguser-authentik
                    #key: pgbouncer-port
                    key: port
              AUTHENTIK_POSTGRESQL__NAME:
                valueFrom:
                  secretKeyRef:
                    name: pg-authentik-pguser-authentik
                    key: dbname
              AUTHENTIK_POSTGRESQL__USER:
                valueFrom:
                  secretKeyRef:
                    name: pg-authentik-pguser-authentik
                    key: user
              AUTHENTIK_POSTGRESQL__PASSWORD:
                valueFrom:
                  secretKeyRef:
                    name: pg-authentik-pguser-authentik
                    key: password
              #AUTHENTIK_POSTGRESQL__USE_PGBOUNCER: "true"
              AUTHENTIK_POSTGRESQL__SSLMODE: verify-ca
              AUTHENTIK_POSTGRESQL__SSLROOTCERT: &pgca /secrets/pg/ca.crt
              AUTHENTIK_REDIS__HOST: authentik-redis.authentik.svc.cluster.local
              AUTHENTIK_SESSION_STORAGE: "db"
              AUTHENTIK_STORAGE__MEDIA__BACKEND: "s3"
              AUTHENTIK_STORAGE__MEDIA__S3__USE_SSL: "true"
              AUTHENTIK_STORAGE__MEDIA__S3__SECURE_URLS: "true"
              AUTHENTIK_LISTEN__TRUSTED_PROXY_CIDRS: "${IP_POD_CIDR_V4}"
              AUTHENTIK_OUTPOSTS__DISCOVER: "false"
              AUTHENTIK_ERROR_REPORTING__ENABLED: "false"
              AUTHENTIK_ERROR_REPORTING__SEND_PII: "false"
            envFrom: &envFrom
              - secretRef:
                  name: authentik-secrets
            securityContext: &sc
              readOnlyRootFilesystem: true
              allowPrivilegeEscalation: false
              capabilities:
                drop: ["ALL"]
            resources:
              requests:
                cpu: "30m"
                memory: "600Mi"
              limits:
                cpu: "1000m"
                memory: "2Gi"
            #probes:
            #  liveness:
            #    enabled: true
            #  readiness:
            #    enabled: true
      worker:
        type: deployment
        replicas: 3
        pod:
          labels:
            db.home.arpa/pg: pg-authentik
            s3.home.arpa/store: "rgw-${CLUSTER_NAME}"
            authentik.home.arpa/https: allow
            prom.home.arpa/kps: allow
            # egress.home.arpa/internet: allow
          topologySpreadConstraints:
            - <<: *tsc
              labelSelector:
                matchLabels:
                  app.kubernetes.io/name: *app
                  app.kubernetes.io/component: worker
        containers:
          main:
            image: *img
            args: [worker]
            env: *env
            envFrom: *envFrom
            securityContext: *sc
            resources:
              requests:
                cpu: "20m"
                memory: "512Mi"
              limits:
                cpu: "1000m"
                memory: "2Gi"
            #probes:
            #  liveness:
            #    enabled: true
            #  readiness:
            #    enabled: true
      ldap:
        type: deployment
        replicas: 3
        pod:
          labels:
            authentik.home.arpa/https: allow
          topologySpreadConstraints:
            - <<: *tsc
              labelSelector:
                matchLabels:
                  app.kubernetes.io/name: *app
                  app.kubernetes.io/component: ldap
        containers:
          main:
            image:
              <<: *img
              repository: ghcr.io/goauthentik/ldap
              tag: 2024.8.3@sha256:6b50f781bd50c0b849c5a7ec32127e65d5018c3a9c5939a072f988027449a978
            env:
              AUTHENTIK_HOST: "https://${APP_DNS_AUTHENTIK}"
              AUTHENTIK_TOKEN:
                valueFrom:
                  secretKeyRef:
                    name: authentik-tokens
                    key: AUTHENTIK_TOKEN_LDAP
            securityContext: *sc
            resources:
              requests:
                cpu: "10m"
                memory: "128Mi"
              limits:
                cpu: "1000m"
                memory: "512Mi"
            #probes:
            #  liveness:
            #    enabled: true
            #  readiness:
            #    enabled: true
      radius:
        type: deployment
        replicas: 3
        pod:
          labels:
            authentik.home.arpa/https: allow
          topologySpreadConstraints:
            - <<: *tsc
              labelSelector:
                matchLabels:
                  app.kubernetes.io/name: *app
                  app.kubernetes.io/component: radius
        containers:
          main:
            image:
              <<: *img
              repository: ghcr.io/goauthentik/radius
              tag: 2024.8.3@sha256:487c2cc98193ad84286b260115b1ded3b405b28c08aa57e45116fcce362c7fa9
            env:
              AUTHENTIK_HOST: "https://${APP_DNS_AUTHENTIK}"
              AUTHENTIK_TOKEN:
                valueFrom:
                  secretKeyRef:
                    name: authentik-tokens
                    key: AUTHENTIK_TOKEN_RADIUS
            securityContext: *sc
            resources:
              requests:
                cpu: "10m"
                memory: "128Mi"
              limits:
                cpu: "1000m"
                memory: "512Mi"
            #probes:
            #  liveness:
            #    enabled: true
            #  readiness:
            #    enabled: true
      redis:
        type: deployment
        replicas: 1
        containers:
          redis:
            image:
              repository: "public.ecr.aws/docker/library/redis"
              tag: "7.4.1@sha256:1027a3a0a6130964c2ffb1901f600eb3ba9ae4555ef5922f6fe63bd626f4a317"
            command: ["redis-server", "--save", "''", "--appendonly", "no", "--requirepass", "$(AUTHENTIK_REDIS__PASSWORD)"] # save and appendonly options forcibly disable RDB and AOF persistence entirely
            envFrom: *envFrom
            securityContext: *sc
            resources:
              requests:
                cpu: "10m"
                memory: "32Mi"
              limits:
                cpu: "1000m"
                memory: "512Mi"
    service:
      authentik:
        controller: authentik
        ports:
          http: &port
            port: 9000
            protocol: HTTP
            appProtocol: http
          http-80:
            <<: *port
            port: 80
            targetPort: 9000
          metrics:
            <<: *port
            port: 9300
      redis:
        primary: false
        controller: redis
        ports:
          redis:
            port: 6379
      expose:
        primary: false
        controller: authentik
        type: LoadBalancer
        annotations:
          io.cilium/internal: "true"
          io.cilium/lb-ipam-ips: "${APP_IP_AUTHENTIK}"
        ports:
          http:
            port: 443
            targetPort: 9443
            protocol: HTTPS
            appProtocol: https
      ldap:
        primary: false
        controller: ldap
        type: LoadBalancer
        annotations:
          coredns.io/hostname: "${APP_DNS_AUTHENTIK_LDAP}"
          io.cilium/lb-ipam-ips: "${APP_IP_AUTHENTIK_LDAP}"
        ports:
          ldap-tcp: &ldap
            port: 389
            targetPort: 3389
            protocol: TCP
          ldap-udp:
            <<: *ldap
            protocol: UDP
          ldaps-tcp: &ldaps
            port: 636
            targetPort: 6636
            protocol: TCP
          ldaps-udp:
            <<: *ldaps
            protocol: UDP
      radius:
        primary: false
        controller: radius
        type: LoadBalancer
        annotations:
          coredns.io/hostname: "${APP_DNS_AUTHENTIK_RADIUS}"
          io.cilium/lb-ipam-ips: "${APP_IP_AUTHENTIK_RADIUS}"
        ports:
          radius-udp: &radius
            port: 1812
            protocol: UDP
            appProtocol: radius
          radius-tcp:
            <<: *radius
            protocol: TCP
    ingress:
      main:
        className: nginx-external
        annotations:
          external-dns.alpha.kubernetes.io/target: "${DNS_CF}"
          external-dns.alpha.kubernetes.io/cloudflare-proxied: "true"
        hosts:
          - host: &host "${APP_DNS_AUTHENTIK:=authentik}"
            paths: &paths
              - path: /
                pathType: Prefix
                service:
                  identifier: authentik
                  port: http
        tls:
          - hosts: [*host]
            secretName: authentik-tls
    persistence:
      pg-ca:
        type: secret
        #name: pg-authentik-pgbouncer
        name: pg-authentik-cluster-cert
        defaultMode: 0400
        globalMounts:
          - subPath: ca.crt
            #subPath: pgbouncer-frontend.ca-roots
            path: *pgca
      tls:
        type: secret
        name: authentik-tls
        defaultMode: 0400
        globalMounts:
          - path: "/certs/${APP_DNS_AUTHENTIK}-k8s"
      tmp:
        type: emptyDir
        medium: Memory
        globalMounts:
          - path: "/media/public"
    defaultPodOptions:
      automountServiceAccountToken: false
      enableServiceLinks: false
      hostAliases:
        - ip: "${APP_IP_AUTHENTIK:=127.0.0.1}"
          hostnames: ["${APP_DNS_AUTHENTIK:=authentik}"]
      securityContext:
        runAsNonRoot: true
        runAsUser: &uid 1000
        runAsGroup: *uid
        fsGroup: *uid
        fsGroupChangePolicy: Always
        seccompProfile: { type: "RuntimeDefault" }
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: fuckoff.home.arpa/authentik
                    operator: DoesNotExist
    networkpolicies:
      same-ns:
        podSelector: {}
        policyTypes: [Ingress, Egress]
        rules:
          ingress: [from: [{podSelector: {}}]]
          egress: [to: [{podSelector: {}}]]
      vm-ad:
        nameOverride: vm-ad
        controller: worker
        policyTypes: [Egress]
        rules:
          egress: [to: [{ipBlock: {cidr: "${IP_AD_CIDR:=127.0.0.1/32}"}}]]
    serviceMonitor:
      authentik:
        serviceName: authentik
        endpoints:
          - port: metrics
            scheme: http
            path: /metrics
            interval: 1m
            scrapeTimeout: 30s
