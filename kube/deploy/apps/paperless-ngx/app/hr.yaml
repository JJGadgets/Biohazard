---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: &app paperless-ngx
  namespace: *app
  labels:
    nginx.ingress.home.arpa/type: auth
spec:
  chart:
    spec:
      chart: app-template
      version: 2.3.0
      sourceRef:
        name: bjw-s
        kind: HelmRepository
        namespace: flux-system
  values:
    controllers:
      main:
        type: deployment
        replicas: 1
        pod:
          labels:
            db.home.arpa/pg: "pg-home"
            ingress.home.arpa/nginx-internal: "allow"
            # egress.home.arpa/nginx-external: "allow" # authentik # commented out currently because only OIDC needs this
        containers:
          main:
            image:
              repository: "ghcr.io/paperless-ngx/paperless-ngx"
              tag: "2.4.1@sha256:434ea85ee83c54965cdc79525cc1064b8e6feba280f39c7bb99fb092585c5da8"
            args: ["/usr/local/bin/supervisord", "-c", "/etc/supervisord.conf", "--user", "paperless", "--logfile", "/tmp/supervisord.log", "--pidfile", "/tmp/supervisord.pid"]
            env:
              PAPERLESS_URL: "https://${APP_DNS_PAPERLESS_NGX}"
              PAPERLESS_PORT: &port "8000"
              PAPERLESS_TIME_ZONE: "${CONFIG_TZ}"
              PAPERLESS_WEBSERVER_WORKERS: "2"
              PAPERLESS_TASK_WORKERS: "2"
              PAPERLESS_REDIS: "unix:///sockets/redis.sock"
              PAPERLESS_CONSUMPTION_DIR: &consume "/nas/consume"
              PAPERLESS_DATA_DIR: &pvc "/nas/data"
              PAPERLESS_EXPORT_DIR: &export "/nas/export"
              PAPERLESS_MEDIA_ROOT: &media "/nas/media"
              PAPERLESS_TRASH_DIR: &trash "/nas/trash"
              PAPERLESS_ENABLE_HTTP_REMOTE_USER: "true"
              PAPERLESS_HTTP_REMOTE_USER_HEADER_NAME: "HTTP_X_AUTHENTIK_UID"
              PAPERLESS_TRUSTED_PROXIES: "${IP_POD_CIDR_V4}"
              PAPERLESS_OCR_LANGUAGES: "eng"
              PAPERLESS_OCR_LANGUAGE: "eng"
              PAPERLESS_CONSUMER_POLLING: "60" # 1 minute, inotify doesn't work over NFS
              PAPERLESS_CONSUMER_RECURSIVE: "true"
              PAPERLESS_CONSUMER_SUBDIRS_AS_TAGS: "true"
              PAPERLESS_TIKA_ENABLED: "true"
              PAPERLESS_TIKA_ENDPOINT: "http://tika.paperless-ngx.svc.cluster.local"
              PAPERLESS_TIKA_GOTENBERG_ENDPOINT: "http://gotenberg.paperless-ngx.svc.cluster.local"
              PAPERLESS_DBENGINE: "postgresql"
              # PAPERLESS_DBSSLMODE: "verify-full"
              # PAPERLESS_DBSSLROOTCERT: &pg-ca "/pg-tls/ca.crt"
              PAPERLESS_DBHOST:
                valueFrom:
                  secretKeyRef:
                    name: &pguser "pg-home-pguser-paperless-ngx"
                    key: "pgbouncer-host"
              PAPERLESS_DBPORT:
                valueFrom:
                  secretKeyRef:
                    name: *pguser
                    key: "pgbouncer-port"
              PAPERLESS_DBNAME:
                valueFrom:
                  secretKeyRef:
                    name: *pguser
                    key: "dbname"
              PAPERLESS_DBUSER:
                valueFrom:
                  secretKeyRef:
                    name: *pguser
                    key: "user"
              PAPERLESS_DBPASS:
                valueFrom:
                  secretKeyRef:
                    name: *pguser
                    key: "password"
            envFrom:
              - secretRef:
                  name: "paperless-ngx-secrets"
            securityContext: &sc
              readOnlyRootFilesystem: true
              allowPrivilegeEscalation: false
              capabilities:
                drop: ["ALL"]
            resources:
              requests:
                cpu: "10m"
                memory: "1000Mi"
              limits:
                cpu: "3000m"
                memory: "3000Mi"
          redis:
            image:
              repository: "public.ecr.aws/docker/library/redis"
              tag: "7.2.4-bookworm@sha256:b5ddcd52d425a8e354696c022f392fe45fca928f68d6289e6bb4a709c3a74668"
            command: ["redis-server", "--save", "''", "--appendonly", "no", "--port", "0", "--bind", "127.0.0.1", "--unixsocket", "/sockets/redis.sock", "--unixsocketperm", "700"] # save and appendonly options forcibly disable RDB and AOF persistence entirely
            securityContext: *sc
            resources:
              requests:
                cpu: "10m"
                memory: "32Mi"
              limits:
                cpu: "1000m"
                memory: "512Mi"
      tika:
        type: deployment
        replicas: 1
        containers:
          main:
            image:
              repository: "ghcr.io/paperless-ngx/tika"
              tag: "2.9.0-full@sha256:d27cbb3ff6c3c1dcf74fb424f63426199d1393fda2f4ed342c5c3756379d0a8e"
            securityContext: *sc
            resources: # TODO: adjust (Java app)
              requests:
                cpu: "10m"
                memory: "256Mi"
              limits:
                cpu: "3000m"
                memory: "6000Mi"
      gotenberg:
        type: deployment
        replicas: 1
        containers:
          main:
            image:
              repository: "docker.io/gotenberg/gotenberg"
              tag: "8.0.2@sha256:50ddab5dd5fbd152b55497ee7978efc34f7e00e4326b70140401859155cf1f8f"
            command: ["gotenberg", "--chromium-disable-javascript=true", "--chromium-allow-list=file:///tmp/.*"]
            securityContext: *sc
            resources: # TODO: adjust (Go app)
              requests:
                cpu: "10m"
                memory: "64Mi"
              limits:
                cpu: "3000m"
                memory: "6000Mi"
    service:
      main:
        ports:
          http:
            port: *port
      tika:
        controller: "tika"
        ports:
          tika:
            port: 80
            targetPort: 9998
      gotenberg:
        controller: "gotenberg"
        ports:
          gotenberg:
            port: 80
            targetPort: 3000
    ingress:
      main:
        enabled: true
        primary: true
        className: "nginx-internal"
        annotations:
          nginx.ingress.kubernetes.io/auth-signin: |-
            https://${APP_DNS_PAPERLESS_NGX}/outpost.goauthentik.io/start?rd=$escaped_request_uri
        hosts:
          - host: &host "${APP_DNS_PAPERLESS_NGX}"
            paths:
              - path: "/"
                pathType: Prefix
                service:
                  name: main
                  port: http
        tls:
          - hosts:
              - *host
      api:
        enabled: true
        primary: false
        className: "nginx-internal"
        annotations:
          nginx.ingress.kubernetes.io/use-regex: "true"
        hosts:
          - host: &api "${APP_DNS_PAPERLESS_NGX}"
            paths:
              - path: "/api/.*"
                pathType: ImplementationSpecific
                service:
                  name: main
                  port: http
        tls:
          - hosts:
              - *api
    persistence:
      nas:
        enabled: true
        type: nfs
        server: "${IP_TRUENAS}"
        path: "${PATH_NAS_PERSIST_K8S}/paperless-ngx"
        advancedMounts:
          main:
            main:
              - path: "/nas"
      tmp:
        enabled: true
        type: emptyDir
        medium: Memory
        advancedMounts:
          main:
            main:
              - subPath: "paperless"
                path: "/tmp"
              - subPath: "apt"
                path: "/var/lib/apt"
              - &sockdir
                subPath: "sockets"
                path: "/sockets"
            redis:
              - *sockdir
              - subPath: "forceDisableDataPathToDisableRDB"
                path: "/data"
                readOnly: true # jank to lock the dir
          tika:
            main:
              - subPath: "tika"
                path: "/tmp"
          gotenberg:
            main:
              - subPath: "gotenberg"
                path: "/tmp"
      # pg-tls:
      #   enabled: true
      #   type: secret
      #   name: "pg-paperless-ngx-cluster-cert"
      #   defaultMode: 0400
      #   advancedMounts:
      #     main:
      #       main:
      #         - subPath: "ca.crt"
      #           path: *pg-ca
      #           readOnly: true
    defaultPodOptions:
      automountServiceAccountToken: false
      enableServiceLinks: false # avoid exposing too much info in env vars in case of lateral movement attempt
      securityContext:
        runAsNonRoot: false
        runAsUser: &uid 1000 # hardcoded `paperless` user
        runAsGroup: *uid
        fsGroup: *uid
        fsGroupChangePolicy: "Always"
        seccompProfile:
          type: "RuntimeDefault"
