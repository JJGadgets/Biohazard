---
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app paperless-ngx
  namespace: *app
spec:
  interval: 5m
  chart:
    spec:
      chart: app-template
      version: 2.6.0
      sourceRef:
        name: bjw-s
        kind: HelmRepository
        namespace: flux-system
  values:
    controllers:
      main:
        type: deployment
        replicas: 1
        pod:
          labels:
            db.home.arpa/pg: "pg-home"
            ingress.home.arpa/nginx-internal: "allow"
            authentik.home.arpa/https: "allow"
            # egress.home.arpa/nginx-external: "allow" # authentik # commented out currently because only OIDC needs this
        containers:
          main:
            image:
              repository: "ghcr.io/paperless-ngx/paperless-ngx"
              tag: "2.17.1@sha256:ab72a0ab42a792228cdbe83342b99a48acd49f7890ae54b1ae8e04401fba24ee"
            args: ["/usr/local/bin/supervisord", "-c", "/etc/supervisord.conf", "--user", "paperless", "--logfile", "/tmp/supervisord.log", "--pidfile", "/tmp/supervisord.pid"]
            env:
              PAPERLESS_URL: "https://${APP_DNS_PAPERLESS_NGX}"
              PAPERLESS_PORT: &port "8000"
              PAPERLESS_TIME_ZONE: "${CONFIG_TZ}"
              PAPERLESS_WEBSERVER_WORKERS: "2"
              PAPERLESS_TASK_WORKERS: "2"
              PAPERLESS_REDIS: "unix:///sockets/redis.sock"
              PAPERLESS_CONSUMPTION_DIR: &consume "/data/consume"
              PAPERLESS_DATA_DIR: &pvc "/data/data"
              PAPERLESS_EXPORT_DIR: &export "/data/export"
              PAPERLESS_MEDIA_ROOT: &media "/data/media"
              PAPERLESS_TRASH_DIR: &trash "/data/trash"
              PAPERLESS_APPS: "allauth.socialaccount.providers.openid_connect"
              # PAPERLESS_SOCIALACCOUNT_PROVIDERS in ES envFrom
              PAPERLESS_TRUSTED_PROXIES: "${IP_POD_CIDR_V4}"
              PAPERLESS_OCR_LANGUAGES: "eng"
              PAPERLESS_OCR_LANGUAGE: "eng"
              PAPERLESS_CONSUMER_POLLING: "60" # 1 minute, inotify doesn't work over NFS
              PAPERLESS_CONSUMER_RECURSIVE: "true"
              PAPERLESS_CONSUMER_SUBDIRS_AS_TAGS: "true"
              PAPERLESS_TIKA_ENABLED: "true"
              PAPERLESS_TIKA_ENDPOINT: "http://tika.paperless-ngx.svc.cluster.local"
              PAPERLESS_TIKA_GOTENBERG_ENDPOINT: "http://gotenberg.paperless-ngx.svc.cluster.local"
              PAPERLESS_DBENGINE: "postgresql"
              # PAPERLESS_DBSSLMODE: "verify-full"
              # PAPERLESS_DBSSLROOTCERT: &pg-ca "/pg-tls/ca.crt"
              PAPERLESS_DBHOST:
                valueFrom:
                  secretKeyRef:
                    name: &pguser "pg-home-pguser-paperless-ngx"
                    key: "pgbouncer-host"
              PAPERLESS_DBPORT:
                valueFrom:
                  secretKeyRef:
                    name: *pguser
                    key: "pgbouncer-port"
              PAPERLESS_DBNAME:
                valueFrom:
                  secretKeyRef:
                    name: *pguser
                    key: "dbname"
              PAPERLESS_DBUSER:
                valueFrom:
                  secretKeyRef:
                    name: *pguser
                    key: "user"
              PAPERLESS_DBPASS:
                valueFrom:
                  secretKeyRef:
                    name: *pguser
                    key: "password"
            envFrom:
              - secretRef:
                  name: "paperless-ngx-secrets"
            securityContext: &sc
              readOnlyRootFilesystem: true
              allowPrivilegeEscalation: false
              capabilities:
                drop: ["ALL"]
            resources:
              requests:
                cpu: "10m"
                memory: "1000Mi"
              limits:
                cpu: "3000m"
                memory: "3000Mi"
          redis:
            image:
              repository: "public.ecr.aws/docker/library/redis"
              tag: "8.2.0-bookworm@sha256:9bdb5c369c05414a774428a4f10ecb36a56c7dec825a9b666a98a8f92900e875"
            command: ["redis-server", "--save", "''", "--appendonly", "no", "--port", "0", "--bind", "127.0.0.1", "--unixsocket", "/sockets/redis.sock", "--unixsocketperm", "700"] # save and appendonly options forcibly disable RDB and AOF persistence entirely
            securityContext: *sc
            resources:
              requests:
                cpu: "10m"
                memory: "32Mi"
              limits:
                cpu: "1000m"
                memory: "512Mi"
      tika:
        type: deployment
        replicas: 1
        containers:
          main:
            image:
              repository: "ghcr.io/paperless-ngx/tika"
              tag: "2.9.1-full@sha256:d59c38244949a418ef16be676eeea770e1616b45986661847d373f4de048a37e"
            securityContext: *sc
            resources: # TODO: adjust (Java app)
              requests:
                cpu: "10m"
                memory: "256Mi"
              limits:
                cpu: "3000m"
                memory: "6000Mi"
      gotenberg:
        type: deployment
        replicas: 1
        containers:
          main:
            image:
              repository: "docker.io/gotenberg/gotenberg"
              tag: "8.21.1@sha256:91486863744f7420ca985ee6cef7c216910e40faffd378f3da7c0fad724d01ba"
            command: ["gotenberg", "--chromium-disable-javascript=true", "--chromium-allow-list=file:///tmp/.*"]
            securityContext: *sc
            resources: # TODO: adjust (Go app)
              requests:
                cpu: "10m"
                memory: "64Mi"
              limits:
                cpu: "3000m"
                memory: "6000Mi"
    service:
      main:
        ports:
          http:
            port: *port
      tika:
        controller: "tika"
        ports:
          tika:
            port: 80
            targetPort: 9998
      gotenberg:
        controller: "gotenberg"
        ports:
          gotenberg:
            port: 80
            targetPort: 3000
    ingress:
      main:
        enabled: true
        primary: true
        className: "nginx-internal"
        hosts:
          - host: &host "${APP_DNS_PAPERLESS_NGX:=paperless}"
            paths:
              - path: "/"
                pathType: Prefix
                service:
                  name: main
                  port: http
        tls:
          - hosts:
              - *host
    persistence:
      data:
        enabled: true
        existingClaim: "paperless-ngx-data"
        globalMounts:
          - subPath: "consume"
            path: "/data/consume"
          - subPath: "data"
            path: "/data/data"
          - subPath: "export"
            path: "/data/export"
          - subPath: "media"
            path: "/data/media"
          - subPath: "trash"
            path: "/data/trash"
      nas:
        enabled: true
        type: nfs
        server: "${IP_TRUENAS:=127.0.0.1}"
        path: "${PATH_NAS_PERSIST_K8S:=/data}/paperless-ngx"
        advancedMounts:
          main:
            main:
              - path: "/nas"
      tmp:
        enabled: true
        type: emptyDir
        medium: Memory
        advancedMounts:
          main:
            main:
              - subPath: "paperless"
                path: "/tmp"
              - subPath: "apt"
                path: "/var/lib/apt"
              - &sockdir
                subPath: "sockets"
                path: "/sockets"
            redis:
              - *sockdir
          tika:
            main:
              - subPath: "tika"
                path: "/tmp"
          gotenberg:
            main:
              - subPath: "gotenberg"
                path: "/tmp"
      # pg-tls:
      #   enabled: true
      #   type: secret
      #   name: "pg-paperless-ngx-cluster-cert"
      #   defaultMode: 0400
      #   advancedMounts:
      #     main:
      #       main:
      #         - subPath: "ca.crt"
      #           path: *pg-ca
      #           readOnly: true
    defaultPodOptions:
      automountServiceAccountToken: false
      enableServiceLinks: false # avoid exposing too much info in env vars in case of lateral movement attempt
      hostAliases:
        - ip: "${APP_IP_AUTHENTIK:=127.0.0.1}"
          hostnames: ["${APP_DNS_AUTHENTIK:=authentik}"]
      securityContext:
        runAsNonRoot: false
        runAsUser: &uid 1000 # hardcoded `paperless` user
        runAsGroup: *uid
        fsGroup: *uid
        fsGroupChangePolicy: "Always"
        seccompProfile: { type: "RuntimeDefault" }
      topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: "kubernetes.io/hostname"
          whenUnsatisfiable: "DoNotSchedule"
          labelSelector:
            matchLabels:
              app.kubernetes.io/name: *app
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: "fuckoff.home.arpa/paperless-ngx"
                    operator: "DoesNotExist"
