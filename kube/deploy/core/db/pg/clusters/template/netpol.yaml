---
# yaml-language-server: $schema=https://raw.githubusercontent.com/datreeio/CRDs-catalog/main/cilium.io/ciliumclusterwidenetworkpolicy_v2.json
apiVersion: cilium.io/v2
kind: CiliumClusterwideNetworkPolicy
metadata:
  name: "${PG_APP_NAME}-to-pg"
spec:
  endpointSelector:
    matchLabels:
      db.home.arpa/pg: "pg-${PG_APP_NAME}"
  egress:
    - toEndpoints: &pg
        - matchLabels:
            cnpg.io/cluster: "pg-${PG_APP_NAME}"
          matchExpressions:
            - &ns
              key: io.kubernetes.pod.namespace
              operator: Exists
        - matchLabels:
            postgres-operator.crunchydata.com/cluster: "pg-${PG_APP_NAME}"
          matchExpressions: [*ns]
      toPorts:
        - ports:
            - port: "5432"
    - toEndpoints: *pg
      icmps: [{}]
---
# yaml-language-server: $schema=https://raw.githubusercontent.com/datreeio/CRDs-catalog/main/cilium.io/ciliumnetworkpolicy_v2.json
apiVersion: cilium.io/v2
kind: CiliumNetworkPolicy
metadata:
  name: "pg-${PG_APP_NAME}"
  namespace: &app "${PG_APP_NS}"
spec:
  endpointSelector:
    matchLabels:
      cnpg.io/cluster: "pg-${PG_APP_NAME}"
  ingress:
    # same namespace
    - fromEndpoints:
        - matchLabels:
            io.kubernetes.pod.namespace: *app
    # allow operator to connect
    - fromEndpoints:
        - matchLabels:
            io.kubernetes.pod.namespace: cnpg
            app.kubernetes.io/instance: cloudnative-pg
            app.kubernetes.io/name: cloudnative-pg
    # allow labelled pods to connect to Postgres only and ping with pg_health
    - fromEndpoints: &pg
        - matchLabels:
            db.home.arpa/pg: "pg-${PG_APP_NAME}"
          matchExpressions:
            - &ns
              key: io.kubernetes.pod.namespace
              operator: Exists
      toPorts:
        - ports:
            - port: "5432"
    - fromEndpoints: *pg
      icmps: [{}]
  egress:
    # allow access to apiserver
    # this is needed for initdb and calling back to operator
    - toEntities:
        - kube-apiserver
    - toEntities:
        - host
      toPorts:
        - ports:
            - port: "6443"
    # same namespace
    - toEndpoints:
        - matchLabels:
            io.kubernetes.pod.namespace: *app
            cnpg.io/cluster: "pg-${PG_APP_NAME}"
    # CNPG webhook
    - toServices:
        - k8sService:
            serviceName: cnpg-webhook-service
            namespace: cnpg
    # connect to operator
    - toEndpoints:
        - matchLabels:
            io.kubernetes.pod.namespace: cnpg
            app.kubernetes.io/instance: cloudnative-pg
            app.kubernetes.io/name: cloudnative-pg
    # connect to Rook-Ceph RGW/S3 object store in-cluster
    - toServices:
        - k8sServiceSelector:
            selector:
              matchLabels:
                rook_object_store: "${CLUSTER_NAME}"
            namespace: rook-ceph
    - toEndpoints:
        - matchLabels:
            rook_object_store: "${CLUSTER_NAME}"
            io.kubernetes.pod.namespace: rook-ceph
      toPorts:
        - ports:
            - port: "6953"
              protocol: TCP
            - port: "6953"
              protocol: UDP
            - port: "8080"
              protocol: TCP
            - port: "8080"
              protocol: UDP
