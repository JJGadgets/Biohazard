---
apiVersion: helm.toolkit.fluxcd.io/v2beta2
kind: HelmRelease
metadata:
  name: &app tailscale-router
  namespace: tailscale
spec:
  chart:
    spec:
      chart: app-template
      version: "2.4.0"
      sourceRef:
        name: bjw-s
        kind: HelmRepository
        namespace: flux-system
  values:
    controllers:
      main:
        type: "daemonset"
        containers:
          main:
            image: &img
              repository: "ghcr.io/tailscale/tailscale"
              tag: "v1.58.2@sha256:6dc3334d142df48cdf9876152762aff4f17df46c62507f2b4fb07179882a1962"
            env:
              TZ: "${CONFIG_TZ}"
              PORT: "${CONFIG_TAILSCALE_NODE_PORT}"
              SA_NAME: "tailscale-router"
              TS_USERSPACE: "true"
              TS_HOSTNAME: &nodeEnv
                valueFrom:
                  fieldRef:
                    fieldPath: "spec.nodeName"
              TS_KUBE_SECRET: *nodeEnv
              # TS_HOSTNAME:
              #   valueFrom:
              #     fieldRef:
              #       fieldPath: "metadata.name"
              # TS_KUBE_SECRET: ""
              TS_AUTHKEY: "file:/secrets/authkey"
              TS_ROUTES: "${IP_ROUTER_VLAN_K8S_CIDR},${IP_LB_CIDR},${IP_SVC_CIDR_V4}"
              TS_EXTRA_ARGS: "--advertise-exit-node=true --advertise-connector=true --advertise-tags=tag:kube"
              TS_TAILSCALED_EXTRA_ARGS: "--debug=0.0.0.0:58169 --socks5-server=0.0.0.0:61080 --outbound-http-proxy-listen=0.0.0.0:58081 --no-logs-no-support"
            securityContext:
              readOnlyRootFilesystem: true
              allowPrivilegeEscalation: false
              capabilities:
                drop: ["ALL"]
            resources:
              requests:
                cpu: "10m"
                memory: "128Mi"
              limits:
                memory: "512Mi"
            # probes:
            #   startup:
            #     enabled: false
            #   readiness:
            #     enabled: false
            #   liveliness:
            #     enabled: true
            #     custom: true
            #     spec:
            #       initialDelaySeconds: 0
            #       periodSeconds: 1
            #       timeoutSeconds: 5
            #       failureThreshold: 3
            #       command:
            #         - /bin/sh
            #         - -c
    serviceAccount:
      name: *app
      create: true
    service:
      main:
        ports:
          http:
            port: 80
            targetPort: 58169
          socks5:
            port: 1080
            targetPort: 61080
            protocol: TCP
          http-proxy:
            port: 8080
            targetPort: 58081
            protocol: TCP
      tailscaled:
        enabled: true
        primary: false
        controller: main
        type: LoadBalancer
        annotations:
          io.cilium/lb-ipam-ips: "${APP_IP_TAILSCALE}" # BGP
        labels:
          io.cilium/l2: "true"
        externalIPs: ["${APP_IP_EXT_TAILSCALE}"] # L2
        ports:
          wireguard:
            enabled: true
            port: ${CONFIG_TAILSCALE_NODE_PORT}
            protocol: UDP
    persistence:
      config:
        enabled: true
        type: secret
        name: "tailscale-router-secrets"
        defaultMode: 0400
        advancedMounts:
          main:
            main:
              - path: "/secrets"
                readOnly: true
      tmp:
        enabled: true
        type: emptyDir
        medium: Memory
        globalMounts:
          - subPath: "tmp"
            path: "/tmp"
            readOnly: false
          - subPath: "cache"
            path: "/.cache"
            readOnly: false
    defaultPodOptions:
      # hostNetwork: true
      # dnsPolicy: "ClusterFirstWithHostNet"
      automountServiceAccountToken: true # the image expects a ServiceAccount secret when running on Kubernetes even if you're not using it
      enableServiceLinks: false
      securityContext:
        runAsNonRoot: false
        runAsUser: &uid ${APP_UID_TAILSCALE}
        runAsGroup: *uid
        fsGroup: *uid
        fsGroupChangePolicy: Always
        seccompProfile: {type: "RuntimeDefault"}
      tolerations:
        - key: "node-role.kubernetes.io/control-plane"
          operator: "Exists"
          effect: "NoSchedule"
      topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: "kubernetes.io/hostname"
          whenUnsatisfiable: "DoNotSchedule"
          labelSelector:
            matchLabels:
              app.kubernetes.io/name: *app
    serviceMonitor:
      main:
        enabled: true
        endpoints:
          - port: http
            scheme: http
            path: /debug/metrics
            interval: 1m
            scrapeTimeout: 30s