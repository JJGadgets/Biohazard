---
# MAKE SURE CRDs ARE INSTALLED IN CLUSTER VIA cilium-config ConfigMap OR Cilium HelmRelease/values.yaml (bgpControlPlane.enabled: true), BEFORE THIS IS APPLIED!
# "CiliumBGPPeeringPolicy" Custom Resource will replace the old MetalLB BGP's "bgp-config" ConfigMap
# "CiliumBGPPeeringPolicy" is used with `bgpControlPlane.enabled: true` which uses GoBGP, NOT the old `bgp.enabled: true` which uses MetalLB
---
# yaml-language-server: $schema=https://crds.jank.ing/cilium.io/ciliumbgppeeringpolicy_v2alpha1.json
# apiVersion: cilium.io/v2alpha1
# kind: CiliumBGPPeeringPolicy
# metadata:
#   name: bgp-loadbalancer-ip-main
# spec:
#   nodeSelector:
#     matchLabels:
#       kubernetes.io/os: "linux" # match all Linux nodes, change this to match more granularly if more than 1 PeeringPolicy is to be used throughout cluster
#   virtualRouters:
#     - localASN: &router ${ASN_ROUTER} # ASNs are processed in uint32
#       exportPodCIDR: false
#       serviceSelector: &all # this replaces address-pools, instead of defining the range of IPs that can be assigned to LoadBalancer services, now services have to match below selectors for their LB IPs to be announced
#         matchExpressions:
#           - {key: io.cilium/bgp, operator: NotIn, values: ["deny", "false"]}
#           - {key: io.cilium/internal, operator: NotIn, values: ["true"]}
#       neighbors:
#         - peerAddress: "${IP_ROUTER_VLAN_K8S}/32" # unlike bgp-config ConfigMap, peerAddress needs to be in CIDR notation
#           peerASN: *router
#           # authSecretRef: cilium-bgp-password-router # doesn't work with FortiGate, reason unknown
#           gracefulRestart:
#             enabled: true
#             restartTimeSeconds: 120
#     - localASN: ${ASN_CLUSTER_NODES}
#       exportPodCIDR: false
#       serviceSelector: *all
#       neighbors:
#         - &nodes
#           peerAddress: "${IP_ROUTER_VLAN_K8S_PREFIX}1/32"
#           peerASN: ${ASN_CLUSTER_NODES}
#           peerPort: 61790
#         - <<: *nodes
#           peerAddress: "${IP_ROUTER_VLAN_K8S_PREFIX}2/32"
#         - <<: *nodes
#           peerAddress: "${IP_ROUTER_VLAN_K8S_PREFIX}3/32"
#         # - <<: *nodes
#         #   peerAddress: "127.0.0.1/32"
#         # - <<: *nodes
#         #   peerAddress: "127.0.0.1/32"
#         #   peerPort: 61791
---
# yaml-language-server: $schema=https://crds.jank.ing/cilium.io/ciliumbgpclusterconfig_v2alpha1.json
apiVersion: cilium.io/v2alpha1
kind: CiliumBGPClusterConfig
metadata:
  name: bgp-loadbalancer-ip-main
spec:
  nodeSelector:
    matchLabels:
      kubernetes.io/os: "linux" # match all Linux nodes, change this to match more granularly if more than 1 PeeringPolicy is to be used throughout cluster
  bgpInstances:
    - name: ciel
      localASN: &router ${ASN_ROUTER} # ASNs are processed in uint32
      peers:
        - name: ciel
          peerAddress: "${IP_ROUTER_VLAN_K8S}" # unlike bgp-config ConfigMap, peerAddress needs to be in CIDR notation
          peerASN: *router
          peerConfigRef:
            name: ciel
---
# yaml-language-server: $schema=https://crds.jank.ing/cilium.io/ciliumbgppeerconfig_v2alpha1.json
apiVersion: cilium.io/v2alpha1
kind: CiliumBGPPeerConfig
metadata:
  name: ciel
spec:
  # authSecretRef: cilium-bgp-password-router
  gracefulRestart:
    enabled: true
    restartTimeSeconds: 120
  families:
    - afi: ipv4
      safi: unicast
      advertisements:
        matchLabels:
          bgp.home.arpa/peer: ciel
    - afi: ipv6
      safi: unicast
      advertisements:
        matchLabels:
          bgp.home.arpa/peer: ciel
---
# yaml-language-server: $schema=https://crds.jank.ing/cilium.io/ciliumbgpadvertisement_v2alpha1.json
apiVersion: cilium.io/v2alpha1
kind: CiliumBGPAdvertisement
metadata:
  name: ciel
  labels:
    bgp.home.arpa/peer: ciel
spec:
  advertisements:
    - advertisementType: Service
      service:
        addresses: [LoadBalancerIP]
      selector:
        matchExpressions:
          - {key: io.cilium/bgp, operator: NotIn, values: ["deny", "false"]}
          - {key: io.cilium/internal, operator: NotIn, values: ["true"]}
    # - advertisementType: Service
    #   service:
    #     addresses: [ClusterIP]
    #   selector:
    #     matchExpressions:
    #       - {key: io.cilium/clusterip, operator: NotIn, values: ["deny", "false"]}
    - advertisementType: PodCIDR

