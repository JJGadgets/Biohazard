---
apiVersion: helm.toolkit.fluxcd.io/v2beta2
kind: HelmRelease
metadata:
  name: &app onepassword-connect
  namespace: *app
spec:
  interval: 5m
  chart:
    spec:
      chart: app-template
      version: "2.6.0"
      sourceRef:
        name: bjw-s
        kind: HelmRepository
        namespace: flux-system
  values:
    controllers:
      main:
        type: deployment
        replicas: 1
        containers:
          main: &ct
            image:
              repository: "docker.io/1password/connect-api"
              tag: "1.7.2@sha256:0c5ae74396e3c18c3b65acb89cb76d31088968cf0c25deca3818c72b01586606"
            env:
              TZ: "${CONFIG_TZ:=Asia/Singapore}"
              XDG_DATA_HOME: &dir "/data"
              OP_SESSION: &creds "/config/1password-credentials.json"
              OP_LOG_LEVEL: "info"
              OP_BUS_PORT: "60001"
              OP_BUS_PEERS: "127.0.0.1:60002"
              OP_HTTPS_PORT: &port "8443"
              OP_TLS_CERT_FILE: &cert "/tls/fullchain.pem"
              OP_TLS_KEY_FILE: &key "/tls/privkey.pem"
            securityContext:
              readOnlyRootFilesystem: true
              allowPrivilegeEscalation: false
              capabilities:
                drop: ["ALL"]
            resources:
              requests:
                cpu: "10m"
                memory: "256Mi"
              limits:
                cpu: "3000m"
                memory: "512Mi"
            # TODO: Deployment.apps "onepassword-connect" is invalid: [spec.template.spec.containers[0].livenessProbe.httpGet.port: Invalid value: "8443": must contain at least one letter (a-z), spec.template.spec.containers[0].readinessProbe.httpGet.port: Invalid value: "8443": must contain at least one letter (a-z), spec.template.spec.containers[0].startupProbe.httpGet.port: Invalid value: "8443": must contain at least one letter (a-z), spec.template.spec.containers[1].livenessProbe.httpGet.port: Invalid value: "57832": must contain at least one letter (a-z), spec.template.spec.containers[1].readinessProbe.httpGet.port: Invalid value: "57832": must contain at least one letter (a-z), spec.template.spec.containers[1].startupProbe.httpGet.port: Invalid value: "57832": must contain at least one letter (a-z)]
            # probes:
            #   startup:
            #     enabled: true
            #     custom: true
            #     spec: &probe
            #       periodSeconds: 1
            #       failureThreshold: 120
            #       httpGet: &get
            #         path: "/heartbeat"
            #         port: *port
            #         scheme: HTTPS
            #         httpHeaders:
            #           - name: Host
            #             value: &host "${APP_DNS_ONEPASSWORD_CONNECT}"
            #   readiness:
            #     enabled: true
            #     custom: true
            #     spec:
            #       <<: *probe
            #       periodSeconds: 30
            #       httpGet:
            #         <<: *get
            #         path: "/health"
            #   liveness:
            #     enabled: true
            #     custom: true
            #     spec:
            #       <<: *probe
            #       periodSeconds: 30
            #       failureThreshold: 3
          sync:
            <<: *ct
            image:
              repository: "docker.io/1password/connect-sync"
              tag: "1.7.3@sha256:2f17621c7eb27bbcb1f86bbc5e5a5198bf54ac3b9c2ffac38064d03c932b07d5"
            env:
              TZ: "${CONFIG_TZ:=Asia/Singapore}"
              XDG_DATA_HOME: *dir
              OP_SESSION: *creds
              OP_LOG_LEVEL: "info"
              OP_HTTP_PORT: &port "57832"
              OP_BUS_PORT: "60002"
              OP_BUS_PEERS: "127.0.0.1:60001"
            # probes:
            #   startup:
            #     enabled: true
            #     custom: true
            #     spec: &probe
            #       periodSeconds: 1
            #       failureThreshold: 120
            #       httpGet:
            #         path: "/heartbeat"
            #         port: *port
            #   readiness:
            #     enabled: true
            #     custom: true
            #     spec:
            #       periodSeconds: 30
            #       httpGet:
            #         path: "/health"
            #         port: *port
            #   liveness:
            #     enabled: true
            #     custom: true
            #     spec:
            #       <<: *probe
            #       periodSeconds: 30
            #       failureThreshold: 3
    service:
      main:
        enabled: true
        primary: true
        controller: main
        type: LoadBalancer
        externalTrafficPolicy: Cluster
        annotations:
          coredns.io/hostname: "${APP_DNS_ONEPASSWORD_CONNECT}"
          "io.cilium/lb-ipam-ips": "${APP_IP_ONEPASSWORD_CONNECT}"
        ports:
          http:
            enabled: true
            port: 443
            targetPort: 8443
            protocol: HTTPS
    persistence:
      config:
        enabled: true
        type: secret
        name: "onepassword-connect-secrets"
        globalMounts:
          - subPath: "1password-credentials.json"
            path: *creds
            readOnly: true
      tmp:
        enabled: true
        type: emptyDir
        medium: Memory
        globalMounts:
          - path: *dir
            readOnly: false
      tls:
        enabled: true
        type: secret
        name: "onepassword-connect-tls"
        defaultMode: 0400
        advancedMounts:
          main:
            main:
              - subPath: "tls.crt"
                path: "/tls/fullchain.pem"
                readOnly: true
              - subPath: "tls.key"
                path: "/tls/privkey.pem"
                readOnly: true
    defaultPodOptions:
      automountServiceAccountToken: false
      enableServiceLinks: false
      securityContext:
        runAsNonRoot: true
        runAsUser: &uid 999
        runAsGroup: *uid
        fsGroup: *uid
        fsGroupChangePolicy: "Always"
        seccompProfile: { type: "RuntimeDefault" }
      topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: "kubernetes.io/hostname"
          whenUnsatisfiable: "DoNotSchedule"
          labelSelector:
            matchLabels:
              app.kubernetes.io/name: *app
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: "fuckoff.home.arpa/onepassword-connect"
                    operator: "DoesNotExist"
