---
# yaml-language-server: $schema=https://raw.githubusercontent.com/datreeio/CRDs-catalog/main/cilium.io/ciliumnetworkpolicy_v2.json
apiVersion: cilium.io/v2
kind: CiliumNetworkPolicy
metadata:
  name: ingress-nginx-default
  namespace: ingress
spec:
  # TODO: simplify this entire netpols file
  endpointSelector:
    matchLabels:
      app.kubernetes.io/name: ingress-nginx
  ingress:
    # allow kube-apiserver and remote-node (Cilium) for webhooks
    - fromEntities:
        - kube-apiserver
        - remote-node
      toPorts:
        - ports:
            - port: "80"
              protocol: TCP
            - port: "443"
              protocol: TCP
            - port: "8443"
              protocol: TCP
    # all ingress-nginx traffic
    - fromEndpoints:
        - matchLabels:
            app.kubernetes.io/name: ingress-nginx
    # allow all ingress traffic outside cluster
    - fromEntities:
        - world
      toPorts:
        - ports:
            - port: "80"
              protocol: TCP
          rules:
            http:
              - {}
        - ports:
            - port: "443"
              protocol: TCP
            - port: "443"
              protocol: UDP
    # allow traffic from external-proxy-x
    - fromEndpoints:
        - matchLabels:
            app.kubernetes.io/instance: external-proxy-x
      toPorts:
        - ports:
            - port: "80"
            - port: "443"
            - port: "8443"
    # allow traffic from CloudFlare's cloudflared tunnel
    - fromEndpoints:
        - matchLabels:
            app.kubernetes.io/instance: cloudflared
            app.kubernetes.io/name: cloudflared
            io.kubernetes.pod.namespace: cloudflare
      toPorts:
        - ports:
            - port: "443"
    # allow traffic from pods with egress label
    - fromEndpoints:
        - matchExpressions:
            - key: io.kubernetes.pod.namespace
              operator: Exists
            - &egress
              key: egress.home.arpa/ingress-nginx
              operator: In
              values: ["allow"]
            - <<: *egress
              key: egress.home.arpa/nginx-internal
            - <<: *egress
              key: egress.home.arpa/nginx-external
            - <<: *egress
              key: egress.home.arpa/nginx-public
    # allow authentik-managed components to connect to main authentik server
    - fromEndpoints:
        - matchExpressions:
            - key: io.kubernetes.pod.namespace
              operator: Exists
            - key: app.kubernetes.io/managed-by
              operator: In
              values: ["goauthentik.io"]
    # allow KPS to scrape
    - fromEndpoints:
        - matchLabels:
            io.kubernetes.pod.namespace: "monitoring"
            prometheus: "kps"
  egress:
    # allow access to kube-apiserver to get Ingress/etc resources and push updates
    - toEntities:
        - kube-apiserver
    - toEntities: 
        - host
      toPorts:
        - ports:
            - port: "6443"
    # allow egress to all owned/controlled resources outside cluster
    - toFQDNs:
        - matchPattern: "*.${DNS_MAIN}"
        - matchPattern: "*.${DNS_SHORT}"
    - toCIDRSet:
        - cidr: "${IP_ROUTER_LAN_CIDR}"
      toPorts:
        - ports:
            - port: "80"
            - port: "443"
            - port: "9000"
            - port: "9443"
            - port: "8086"
    # allow ingress-nginx traffic
    - toEndpoints:
        - matchLabels:
            app.kubernetes.io/name: ingress-nginx
    # allow ingress-nginx to egress to pods that require ingress
    - toEndpoints:
        - matchLabels:
            ingress.home.arpa/nginx: allow
          matchExpressions:
            - key: io.kubernetes.pod.namespace
              operator: Exists
    # allow egress to all pods, except pods in core namespaces that don't need ingress controllers (TODO: rm this for podLabels with ingress.home.arpa/nginx)
    - toEndpoints:
        - matchExpressions:
            - key: io.kubernetes.pod.namespace
              operator: NotIn
              values:
                - kube-system
                - flux-system
                - rook-ceph
    # allow Flux notification-controller ingress
    - toEndpoints:
        - matchLabels:
            io.kubernetes.pod.namespace: flux-system
            app: notification-controller
      toPorts:
        - ports:
            - port: "9292"
              protocol: TCP
            - port: "80"
              protocol: TCP
          rules:
            http:
              - {}
    # connect to Rook-Ceph RGW/S3 object store in-cluster
    - toServices:
        - k8sServiceSelector:
            selector:
              matchLabels:
                rook_object_store: "${CLUSTER_NAME}"
            namespace: rook-ceph
    - toEndpoints:
        - matchLabels:
            rook_object_store: "${CLUSTER_NAME}"
            io.kubernetes.pod.namespace: rook-ceph
      toPorts:
        - ports:
            - port: "6953"
              protocol: TCP
            - port: "6953"
              protocol: UDP
            - port: "8080"
              protocol: TCP
            - port: "8080"
              protocol: UDP
    # allow egress to hubble-ui (2023-05-07: no kube-system netpols planned)
    - toServices:
        - k8sService:
            serviceName: hubble-ui
            namespace: kube-system
    - toEndpoints:
        - matchLabels:
            k8s-app: hubble-ui
            io.kubernetes.pod.namespace: kube-system
    # DNS proxy to kube-dns, DNS L7 visibility
    - toEndpoints:
        - matchLabels:
            io.kubernetes.pod.namespace: kube-system
            k8s-app: kube-dns
      toPorts:
        - ports:
            - port: "53"
          rules:
            dns:
              - matchPattern: "*"
---
# yaml-language-server: $schema=https://raw.githubusercontent.com/datreeio/CRDs-catalog/main/cilium.io/ciliumnetworkpolicy_v2.json
apiVersion: cilium.io/v2
kind: CiliumNetworkPolicy
metadata:
  name: "egress-to-ingress-nginx-internal"
  namespace: ingress
spec:
  # TODO: simplify this entire netpols file
  endpointSelector:
    matchLabels:
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/instance: "nginx-internal"
  ingress:
    # allow traffic from pods with egress label
    - fromEndpoints:
        - matchExpressions:
            - key: io.kubernetes.pod.namespace
              operator: Exists
            - key: egress.home.arpa/nginx-internal
              operator: In
              values: ["allow"]
---
# yaml-language-server: $schema=https://raw.githubusercontent.com/datreeio/CRDs-catalog/main/cilium.io/ciliumnetworkpolicy_v2.json
apiVersion: cilium.io/v2
kind: CiliumNetworkPolicy
metadata:
  name: "egress-to-ingress-nginx-external"
  namespace: ingress
spec:
  # TODO: simplify this entire netpols file
  endpointSelector:
    matchLabels:
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/instance: "nginx-external"
  ingress:
    # allow traffic from pods with egress label
    - fromEndpoints:
        - matchExpressions:
            - key: io.kubernetes.pod.namespace
              operator: Exists
            - key: egress.home.arpa/nginx-external
              operator: In
              values: ["allow"]
---
# yaml-language-server: $schema=https://raw.githubusercontent.com/datreeio/CRDs-catalog/main/cilium.io/ciliumnetworkpolicy_v2.json
apiVersion: cilium.io/v2
kind: CiliumNetworkPolicy
metadata:
  name: "egress-to-ingress-nginx-public"
  namespace: ingress
spec:
  # TODO: simplify this entire netpols file
  endpointSelector:
    matchLabels:
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/instance: "nginx-public"
  ingress:
    # allow traffic from pods with egress label
    - fromEndpoints:
        - matchExpressions:
            - key: io.kubernetes.pod.namespace
              operator: Exists
            - key: egress.home.arpa/nginx-public
              operator: In
              values: ["allow"]
---
apiVersion: "cilium.io/v2"
kind: CiliumClusterwideNetworkPolicy
metadata:
  name: "ingress-to-ingress-nginx"
spec:
  description: "Allow pods that require ingress to allow traffic from ingress-nginx, no port restrictions"
  endpointSelector:
    matchLabels:
      ingress.home.arpa/nginx: allow
  ingress:
    # ingress controller webhook admission
    - fromEndpoints:
        - matchLabels:
            app.kubernetes.io/instance: ingress-nginx
            app.kubernetes.io/name: ingress-nginx
            io.kubernetes.pod.namespace: ingress
---
apiVersion: "cilium.io/v2"
kind: CiliumClusterwideNetworkPolicy
metadata:
  name: "ingress-from-nginx-internal"
spec:
  description: "Allow pods that require ingress to allow traffic from ingress-nginx, no port restrictions"
  endpointSelector:
    matchLabels:
      ingress.home.arpa/nginx-internal: allow
  ingress:
    # ingress controller webhook admission
    - fromEndpoints:
        - matchLabels:
            app.kubernetes.io/instance: nginx-internal
            app.kubernetes.io/name: ingress-nginx
            io.kubernetes.pod.namespace: ingress
---
apiVersion: "cilium.io/v2"
kind: CiliumClusterwideNetworkPolicy
metadata:
  name: "ingress-from-nginx-external"
spec:
  description: "Allow pods that require ingress to allow traffic from ingress-nginx, no port restrictions"
  endpointSelector:
    matchLabels:
      ingress.home.arpa/nginx-external: allow
  ingress:
    # ingress controller webhook admission
    - fromEndpoints:
        - matchLabels:
            app.kubernetes.io/instance: nginx-external
            app.kubernetes.io/name: ingress-nginx
            io.kubernetes.pod.namespace: ingress
---
apiVersion: "cilium.io/v2"
kind: CiliumClusterwideNetworkPolicy
metadata:
  name: "ingress-from-nginx-public"
spec:
  description: "Allow pods that require ingress to allow traffic from ingress-nginx, no port restrictions"
  endpointSelector:
    matchLabels:
      ingress.home.arpa/nginx-public: allow
  ingress:
    # ingress controller webhook admission
    - fromEndpoints:
        - matchLabels:
            app.kubernetes.io/instance: nginx-public
            app.kubernetes.io/name: ingress-nginx
            io.kubernetes.pod.namespace: ingress
---
apiVersion: "cilium.io/v2"
kind: CiliumClusterwideNetworkPolicy
metadata:
  name: "egress-to-ingress-nginx-internal"
spec:
  description: "Allow pods that require egress to ingress-nginx, no port restrictions"
  endpointSelector:
    matchLabels:
      egress.home.arpa/nginx-internal: allow
  egress:
    # ingress controller webhook admission
    - toEndpoints:
        - matchLabels:
            app.kubernetes.io/instance: nginx-internal
            app.kubernetes.io/name: ingress-nginx
            io.kubernetes.pod.namespace: ingress
---
apiVersion: "cilium.io/v2"
kind: CiliumClusterwideNetworkPolicy
metadata:
  name: "egress-to-ingress-nginx-external"
spec:
  description: "Allow pods that require egress to ingress-nginx, no port restrictions"
  endpointSelector:
    matchLabels:
      egress.home.arpa/nginx-external: allow
  egress:
    # ingress controller webhook admission
    - toEndpoints:
        - matchLabels:
            app.kubernetes.io/instance: nginx-external
            app.kubernetes.io/name: ingress-nginx
            io.kubernetes.pod.namespace: ingress
---
apiVersion: "cilium.io/v2"
kind: CiliumClusterwideNetworkPolicy
metadata:
  name: "egress-to-ingress-nginx-public"
spec:
  description: "Allow pods that require egress to ingress-nginx, no port restrictions"
  endpointSelector:
    matchLabels:
      egress.home.arpa/nginx-public: allow
  egress:
    # ingress controller webhook admission
    - toEndpoints:
        - matchLabels:
            app.kubernetes.io/instance: nginx-public
            app.kubernetes.io/name: ingress-nginx
            io.kubernetes.pod.namespace: ingress
---
apiVersion: "cilium.io/v2"
kind: CiliumClusterwideNetworkPolicy
metadata:
  name: "egress-to-nginx-internal"
spec:
  description: "Allow pods that require egress to ingress-nginx, no port restrictions"
  endpointSelector:
    matchLabels:
      egress.home.arpa/nginx-internal: allow
  egress:
    # ingress controller webhook admission
    - toEndpoints:
        - matchLabels:
            app.kubernetes.io/instance: nginx-internal
            app.kubernetes.io/name: ingress-nginx
            io.kubernetes.pod.namespace: ingress
---
apiVersion: "cilium.io/v2"
kind: CiliumClusterwideNetworkPolicy
metadata:
  name: "egress-to-nginx-external"
spec:
  description: "Allow pods that require egress to ingress-nginx, no port restrictions"
  endpointSelector:
    matchLabels:
      egress.home.arpa/nginx-external: allow
  egress:
    # ingress controller webhook admission
    - toEndpoints:
        - matchLabels:
            app.kubernetes.io/instance: nginx-external
            app.kubernetes.io/name: ingress-nginx
            io.kubernetes.pod.namespace: ingress
---
apiVersion: "cilium.io/v2"
kind: CiliumClusterwideNetworkPolicy
metadata:
  name: "egress-to-nginx-public"
spec:
  description: "Allow pods that require egress to ingress-nginx, no port restrictions"
  endpointSelector:
    matchLabels:
      egress.home.arpa/nginx-public: allow
  egress:
    # ingress controller webhook admission
    - toEndpoints:
        - matchLabels:
            app.kubernetes.io/instance: nginx-public
            app.kubernetes.io/name: ingress-nginx
            io.kubernetes.pod.namespace: ingress
---
apiVersion: "cilium.io/v2"
kind: CiliumClusterwideNetworkPolicy
metadata:
  name: "ingress-nginx-webhook"
spec:
  endpointSelector: {}
  egress:
    # ingress controller webhook admission
    - toServices:
        - k8sService:
            serviceName: ingress-nginx-controller-admission
            namespace: ingress
    - toEndpoints:
        - matchLabels:
            app.kubernetes.io/instance: ingress-nginx
            app.kubernetes.io/name: ingress-nginx
            io.kubernetes.pod.namespace: ingress
      toPorts:
        - ports:
            - port: "8443"
---
apiVersion: "cilium.io/v2"
kind: CiliumClusterwideNetworkPolicy
metadata:
  name: "nginx-internal-webhook"
spec:
  endpointSelector: {}
  egress:
    # ingress controller webhook admission
    - toServices:
        - k8sService:
            serviceName: nginx-internal-controller-admission
            namespace: ingress
    - toEndpoints:
        - matchLabels:
            app.kubernetes.io/instance: nginx-internal
            app.kubernetes.io/name: ingress-nginx
            io.kubernetes.pod.namespace: ingress
      toPorts:
        - ports:
            - port: "8443"
---
apiVersion: "cilium.io/v2"
kind: CiliumClusterwideNetworkPolicy
metadata:
  name: "nginx-external-webhook"
spec:
  endpointSelector: {}
  egress:
    # ingress controller webhook admission
    - toServices:
        - k8sService:
            serviceName: nginx-external-controller-admission
            namespace: ingress
    - toEndpoints:
        - matchLabels:
            app.kubernetes.io/instance: nginx-external
            app.kubernetes.io/name: ingress-nginx
            io.kubernetes.pod.namespace: ingress
      toPorts:
        - ports:
            - port: "8443"
---
apiVersion: "cilium.io/v2"
kind: CiliumClusterwideNetworkPolicy
metadata:
  name: "nginx-public-webhook"
spec:
  endpointSelector: {}
  egress:
    # ingress controller webhook admission
    - toServices:
        - k8sService:
            serviceName: nginx-public-controller-admission
            namespace: ingress
    - toEndpoints:
        - matchLabels:
            app.kubernetes.io/instance: nginx-public
            app.kubernetes.io/name: ingress-nginx
            io.kubernetes.pod.namespace: ingress
      toPorts:
        - ports:
            - port: "8443"