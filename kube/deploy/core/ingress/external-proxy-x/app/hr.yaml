---
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: external-proxy-x
  namespace: ingress
spec:
  chart:
    spec:
      chart: haproxy
      version: 1.26.0
      sourceRef:
        name: haproxytech
        kind: HelmRepository
        namespace: flux-system
  values:
    image:
      repository: haproxytech/haproxy-debian
      tag: "3.2.4@sha256:11bd3e8916817c8e3c9e54bb06d7c338df93a5d89dbfd71a72250fd5b529f947"
      pullPolicy: IfNotPresent
    kind: DaemonSet
    podLabels:
      egress.home.arpa/nginx-external: allow
      egress.home.arpa/nginx-public: allow
    service:
      type: LoadBalancer
      annotations:
        "io.cilium/lb-ipam-ips": "${APP_IP_HAPROXY_PROXY_X}"
    containerPorts:
      http: 80
      https: 443
    mountedSecrets:
      - volumeName: short-domain-tls
        secretName: short-domain-tls
        mountPath: /ssl/short
      - volumeName: long-domain-tls
        secretName: long-domain-tls
        mountPath: /ssl/long
    extraVolumes:
      - name: tls
        emptyDir:
          medium: Memory
    extraVolumeMounts:
      - name: tls
        mountPath: /tls
    initContainers:
      - name: 01-init-tls-cert-key-combine
        command:
          - /bin/sh
          - -c
          - 'cat /ssl/short/tls.crt /ssl/short/tls.key > /tls/short.pem && cat /ssl/long/tls.crt /ssl/long/tls.key > /tls/long.pem'
        image: public.ecr.aws/docker/library/busybox:latest@sha256:b5d6fe0712636ceb7430189de28819e195e8966372edfc2d9409d79402a0dc16
        imagePullPolicy: IfNotPresent
        volumeMounts:
          - name: tls
            mountPath: /tls
          - name: short-domain-tls
            mountPath: /ssl/short
          - name: long-domain-tls
            mountPath: /ssl/long
      # - name: 01-init-tls-ca-extract
      #   # sed command to extract CA certificate data is specific to and assumes cert-manager + Let's Encrypt certificate chain ordering, and that tls.crt includes CA certs, as of 27 April 2022
      #   command:
      #     - /bin/sh
      #     - -c
      #     - sed -n "0,/END CERTIFICATE/d;/BEGIN CERTIFICATE/,/END CERTIFICATE/p" /ssl/short/tls.crt > /tls/ca.pem
      #   image: public.ecr.aws/debian/debian:11.6-slim
      #   imagePullPolicy: IfNotPresent
      #   volumeMounts:
      #     - name: tls
      #       mountPath: /tls
      #     - name: short-domain-tls
      #       mountPath: /ssl/short
      #     - name: long-domain-tls
      #       mountPath: /ssl/long
    config: |
      global
        log stdout format raw local0 debug
        ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
        ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
        ssl-default-bind-options prefer-client-ciphers no-sslv3 no-tlsv10 no-tlsv11 no-tls-tickets
        ssl-default-server-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
        ssl-default-server-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
        ssl-default-server-options no-sslv3 no-tlsv10 no-tlsv11 no-tls-tickets

      defaults
        mode tcp
        log global
        option tcplog
        timeout client 30s
        timeout connect 4s
        timeout server 30s
        retries 3

      frontend https
        mode http
        bind :443 accept-proxy ssl crt /tls/short.pem crt /tls/long.pem alpn h2,http/1.1
        bind :80 accept-proxy
        redirect scheme https code 301 if !{ ssl_fc } # HTTP to HTTPS redirect
        option forwardfor
        acl immich-fqdn req.hdr(host) -m str ${APP_DNS_IMMICH}
        acl immich-path path_beg /share/
        acl immich-path path_beg /_app/immutable/
        acl immich-api-share path /api/shared-link/me
        acl immich-key url_param(key) -m found
        acl immich-share-ref req.hdr(Referer) -m beg https://${APP_DNS_IMMICH}/share/ # weak but better than nothing
        acl immich-api-asset path_beg /api/asset/
        acl immich-api-asset path_beg /api/download/
        acl immich-api-asset path_beg /api/timeline/bucket # match both buckets and bucket
        acl immich-share-cookie req.cook(immich_shared_link_token) -m found
        use_backend immich if immich-fqdn immich-path
        use_backend immich if immich-fqdn immich-api-share immich-key immich-share-ref
        use_backend immich if immich-fqdn immich-api-asset immich-key immich-share-ref immich-share-cookie
        use_backend nginx-external if { req.hdr(host) -m str ${APP_DNS_AUTHENTIK} }
        use_backend nginx-public if { req.hdr(host) -m end ${DNS_LONG} }
        use_backend nginx-external if { req.hdr(host) -m end ${DNS_SHORT} }

      backend immich
        mode http
        server immich immich.immich.svc.cluster.local:3001 check

      backend nginx-public
        mode http
        server nginxpublic nginx-public-controller.ingress.svc.cluster.local:443 ssl verify none sni str(%[ssl_fc_sni]) check check-sni str(external-proxy-x.${DNS_LONG})

      backend nginx-external
        mode http
        server nginxexternal nginx-external-controller.ingress.svc.cluster.local:443 ssl verify none sni str(%[ssl_fc_sni]) check check-sni str(external-proxy-x.${DNS_SHORT})
# TODO: fix SSL verify
# server internalnginx ingress-nginx-controller.ingress.svc.cluster.local:443 ssl verify required ca-file /tls/ca.pem
    resources:
      requests:
        cpu: 10m
        memory: 128Mi
      limits:
        cpu: 500m
        memory: 512Mi
