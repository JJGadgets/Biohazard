---
# yaml-language-server: $schema=https://raw.githubusercontent.com/datreeio/CRDs-catalog/main/kyverno.io/clusterpolicy_v1.json
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: "pod-reloader"
spec:
  applyRules: "All"
  mutateExistingOnPolicyUpdate: false
  background: false
  rules:
    - name: "reloader-hash"
      match:
        any:
          - resources:
              kinds: ["v1/Secret", "v1/ConfigMap"]
              operations: ["UPDATE"]
              selector:
                matchExpressions:
                  - key: "postgres-operator.crunchydata.com/role"
                    operator: "NotIn"
                    values: ["pgbouncer"]
                  - &pgo
                    key: "postgres-operator.crunchydata.com/instance-set"
                    operator: "NotIn"
                    values: ["kyvernoreloaderrandomvalueherelol"]
                  - <<: *pgo
                    key: "postgres-operator.crunchydata.com/cluster-certificate"
                  - <<: *pgo
                    key: "postgres-operator.crunchydata.com/pgbouncer"
      preconditions:
        all:
          - &noPGO
            key: "{{ request.object.metadata.name }}"
            operator: "NotEquals"
            value: "pg-*-config"
      mutate:
        patchStrategicMerge:
          metadata:
            labels:
              reloader.kyverno.home.arpa/currentHash: &hashGen "{{ truncate('{{ base64_encode('{{ request.object.data }}') }}',`10`) }}"
    - &reloader
      name: "reload-env-vars-secret"
      match:
        any:
          - resources:
              kinds: ["v1/Secret"]
              operations: ["UPDATE"]
      preconditions:
        all: [*noPGO]
      #     - key: "{{ request.object.metadata.labels.\"reloader.kyverno.home.arpa/currentHash\" }}" # TODO: check hash between app and secret/cm
      #       operators: "NotEquals"
      mutate:
        targets: &targets
          - apiVersion: "apps/v1"
            kind: "Deployment"
            namespace: "{{request.namespace}}"
          - apiVersion: "apps/v1"
            kind: "StatefulSet"
            namespace: "{{request.namespace}}"
          - apiVersion: "apps/v1"
            kind: "DaemonSet"
            namespace: "{{request.namespace}}"
        patchStrategicMerge:
          spec:
            template:
              metadata: &hash
                labels:
                  "reloader.kyverno.home.arpa/{{ request.object.kind }}-{{ request.object.metadata.name }}": *hashGen
              spec:
                containers:
                  - env:
                      - valueFrom:
                          secretKeyRef:
                            <(name): "{{ request.object.metadata.name }}"
    - <<: *reloader
      name: "reload-env-vars-configmap"
      match:
        any:
          - resources:
              kinds: ["v1/ConfigMap"]
              operations: ["UPDATE"]
      preconditions:
        all: [*noPGO]
      mutate:
        targets: *targets
        patchStrategicMerge:
          spec:
            template:
              metadata: *hash
              spec:
                containers:
                  - env:
                      - valueFrom:
                          configMapKeyRef:
                            <(name): "{{ request.object.metadata.name }}"
    - <<: *reloader
      name: "reload-volume-secret"
      match:
        any:
          - resources:
              kinds: ["v1/Secret"]
              operations: ["UPDATE"]
      preconditions:
        all: [*noPGO]
      mutate:
        targets: *targets
        patchStrategicMerge:
          spec:
            template:
              metadata: *hash
            volumes:
              - secret:
                  <(name): "{{ request.object.metadata.name }}"
    - <<: *reloader
      name: "reload-volume-configmap"
      match:
        any:
          - resources:
              kinds: ["v1/ConfigMap"]
              operations: ["UPDATE"]
      preconditions:
        all: [*noPGO]
      mutate:
        targets: *targets
        patchStrategicMerge:
          spec:
            template:
              metadata: *hash
            volumes:
              - configMap:
                  <(name): "{{ request.object.metadata.name }}"