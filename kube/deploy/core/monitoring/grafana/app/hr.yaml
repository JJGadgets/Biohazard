---
# yaml-language-server: $schema=https://kubernetes-schemas.devbu.io/helmrelease_v2beta1.json
apiVersion: helm.toolkit.fluxcd.io/v2beta2
kind: HelmRelease
metadata:
  name: grafana
  namespace: monitoring
spec:
  chart:
    spec:
      chart: grafana
      version: 7.3.7
      sourceRef:
        name: grafana
        kind: HelmRepository
        namespace: flux-system
  values: # TODO: separate Grafana's actual configs like dashboards (leave deployment config) into its own configMap and use valuesFrom
    replicas: 1 # OIDC needs specific session, thus 1 replica
    podLabels:
      tailscale.com/expose: "true"
      authentik.home.arpa/https: "allow"
      ingress.home.arpa/nginx-internal: allow
    hostAliases:
      - ip: "${APP_IP_AUTHENTIK}"
        hostnames: ["${APP_DNS_AUTHENTIK}"]
    env:
      GF_EXPLORE_ENABLED: true
      GF_LOG_MODE: console
      GF_LOG_FILTERS: rendering:debug
      GF_SECURITY_ALLOW_EMBEDDING: true
      GF_SECURITY_COOKIE_SAMESITE: grafana
      GF_DATE_FORMATS_USE_BROWSER_LOCALE: true
      GF_AUTH_OAUTH_ALLOW_INSECURE_EMAIL_LOOKUP: true # needed for enabling both proxy and OIDC auth methods, https://github.com/grafana/grafana/issues/70203#issuecomment-1609850174
    envFromSecret: grafana-secrets
    grafana.ini:
      server:
        root_url: "https://${APP_DNS_GRAFANA}"
      analytics:
        check_for_updates: false
        check_for_plugin_updates: false
        reporting_enabled: false
      auth:
        oauth_auto_login: true
      auth.generic_oauth:
        enabled: true
        name: "JJGadgets Auth"
        scopes: "openid profile email groups"
        empty_scopes: false
        login_attribute_path: preferred_username
        groups_attribute_path: groups
        name_attribute_path: name
        # use_pkce: true # not sure if Authentik supports it
      auth.generic_oauth.group_mapping:
        org_id: 1
        role_attribute_path: |
          contains(groups[*], 'Role-Grafana-Admin') && 'GrafanaAdmin' || contains(groups[*], 'Role-Grafana-Viewer') && 'Viewer'
      auth.proxy: # if Tailscale headers exist, it'll be used first, else use OIDC
        enabled: true
        auto_sign_up: true
        whitelist: "${IP_POD_CIDR_V4}"
        header_name: Tailscale-User-Login # email is immutable to account for Tailscale, used for person identity
        header_property: username
        headers: "Name:Tailscale-User-Name Email:Tailscale-User-Login"
        # defaults to viewer role, privileged access needs OIDC
      auth.basic:
        enabled: false
        disable_login_form: true
      auth.anonymous:
        enabled: false
      grafana_net:
        url: "https://grafana.net"
    datasources:
      datasources.yaml:
        apiVersion: 1
        deleteDatasources:
          - { name: Prometheus, orgId: 1 }
          - { name: AlertManager, orgId: 1 }
          #- { name: prom, orgId: 1 }
        datasources:
          - name: Prometheus
            type: prometheus # VictoriaMetrics datasource is wonky and doesn't work, this at least works
            uid: prometheus
            isDefault: true
            access: proxy
            url: http://vmsingle-victoria.monitoring.svc.cluster.local:8429
            #url: http://kps-prometheus.monitoring.svc.cluster.local:9090
            jsonData:
              prometheusType: Prometheus
          - name: AlertManager
            type: alertmanager
            uid: alertmanager
            isDefault: false
            access: proxy
            url: http://alertmanager-local.monitoring.svc.cluster.local:9093
            jsonData:
              implementation: prometheus
          #- name: prom
          #  type: prometheus # VictoriaMetrics datasource is wonky and doesn't work, this at least works
          #  uid: prom
          #  isDefault: false
          #  access: proxy
          #  url: http://kps-prometheus.monitoring.svc.cluster.local:9090
          #  jsonData:
          #    prometheusType: Prometheus
    dashboardProviders:
      dashboardproviders.yaml:
        apiVersion: 1
        providers:
          - name: default
            orgId: 1
            folder: ""
            type: file
            disableDeletion: false
            editable: true
            options:
              path: /var/lib/grafana/dashboards/default
          - name: ceph
            orgId: 1
            folder: Ceph
            type: file
            disableDeletion: false
            editable: true
            options:
              path: /var/lib/grafana/dashboards/ceph
          - name: cilium
            orgId: 1
            folder: Cilium
            type: file
            disableDeletion: false
            editable: true
            options:
              path: /var/lib/grafana/dashboards/cilium
          - name: flux
            orgId: 1
            folder: Flux
            type: file
            disableDeletion: false
            editable: true
            options:
              path: /var/lib/grafana/dashboards/flux
          - name: kubernetes
            orgId: 1
            folder: Kubernetes
            type: file
            disableDeletion: false
            editable: true
            options:
              path: /var/lib/grafana/dashboards/kubernetes
          - name: nginx
            orgId: 1
            folder: Ingress-NGINX
            type: file
            disableDeletion: false
            editable: true
            options:
              path: /var/lib/grafana/dashboards/nginx
          - name: postgres
            orgId: 1
            folder: Postgres
            type: file
            disableDeletion: false
            editable: true
            options:
              path: /var/lib/grafana/dashboard/postgres
          - name: victoriametrics
            orgId: 1
            folder: VictoriaMetrics
            type: file
            disableDeletion: false
            editable: true
            options:
              path: /var/lib/grafana/dashboard/VictoriaMetrics
          - name: windows
            orgId: 1
            folder: Windows
            type: file
            disableDeletion: false
            editable: true
            options:
              path: /var/lib/grafana/dashboard/windows
    dashboards:
      default:
        cloudflared:
          gnetId: 17457 # https://grafana.com/grafana/dashboards/17457?tab=revisions
          revision: 6
          datasource: &DSP
            - { name: DS_PROMETHEUS, value: Prometheus }
        external-dns:
          gnetId: 15038 # https://grafana.com/grafana/dashboards/15038?tab=revisions
          revision: 1
          datasource: Prometheus
        cert-manager:
          url: https://raw.githubusercontent.com/monitoring-mixins/website/master/assets/cert-manager/dashboards/cert-manager.json
          datasource: Prometheus
        fortigate:
          gnetId: 14011 # https://grafana.com/grafana/dashboards/14011?tab=revisions
          revision: 5
          datasource: *DSP
        node-exporter-full:
          gnetId: 1860 # https://grafana.com/grafana/dashboards/1860?tab=revisions
          revision: 31
          datasource: Prometheus
        spegel:
          # renovate: depName="Spegel"
          gnetId: 18089
          revision: 1
          datasource: *DSP
        golang:
          gnetId: 14061
          revision: 1
          datasource: Prometheus
        smartctl-exporter:
          # renovate: depName="Dashboard for smartctl_exporter"
          gnetId: 20204
          revision: 1
          datasource: *DSP
        smartctl-thomas:
          gnetId: 22381
          revision: 1
          datasource: &DSV
            - { name: DS_VICTORIAMETRICS, value: Prometheus }
        etcd-thomas:
          gnetId: 22236
          revision: 1
          datasource: *DSV
      ceph:
        ceph-cluster-galexrt:
          gnetId: 2842
          revision: 17
          datasource: Prometheus
        ceph-pools-galexrt:
          gnetId: 5342
          revision: 9
          datasource: Prometheus
        ceph-osd-galexrt:
          gnetId: 5336
          revision: 9
          datasource: Prometheus
      cilium:
        hubble-dashboard:
          url: https://raw.githubusercontent.com/cilium/cilium/main/install/kubernetes/cilium/files/hubble/dashboards/hubble-dashboard.json
          datasource: Prometheus
        hubble-l7:
          url: https://raw.githubusercontent.com/cilium/cilium/main/install/kubernetes/cilium/files/hubble/dashboards/hubble-l7-http-metrics-by-workload.json
          datasource: Prometheus
        hubble-dns-namespace:
          url: https://raw.githubusercontent.com/cilium/cilium/main/install/kubernetes/cilium/files/hubble/dashboards/hubble-dns-namespace.json
          datasource: *DSP
        hubble-network-overview-namespace:
          url: https://raw.githubusercontent.com/cilium/cilium/main/install/kubernetes/cilium/files/hubble/dashboards/hubble-network-overview-namespace.json
          datasource: *DSP
      flux:
        flux-cluster:
          url: https://raw.githubusercontent.com/fluxcd/flux2/main/manifests/monitoring/monitoring-config/dashboards/cluster.json
          datasource: Prometheus
        flux-control-plane:
          url: https://raw.githubusercontent.com/fluxcd/flux2/main/manifests/monitoring/monitoring-config/dashboards/control-plane.json
          datasource: Prometheus
      kubernetes:
        kubernetes-api-server:
          url: https://raw.githubusercontent.com/dotdc/grafana-dashboards-kubernetes/master/dashboards/k8s-system-api-server.json
          datasource: Prometheus
        kubernetes-coredns:
          url: https://raw.githubusercontent.com/dotdc/grafana-dashboards-kubernetes/master/dashboards/k8s-system-coredns.json
          datasource: Prometheus
        kubernetes-global:
          url: https://raw.githubusercontent.com/dotdc/grafana-dashboards-kubernetes/master/dashboards/k8s-views-global.json
          datasource: Prometheus
        kubernetes-namespaces:
          url: https://raw.githubusercontent.com/dotdc/grafana-dashboards-kubernetes/master/dashboards/k8s-views-namespaces.json
          datasource: Prometheus
        kubernetes-nodes:
          url: https://raw.githubusercontent.com/dotdc/grafana-dashboards-kubernetes/master/dashboards/k8s-views-nodes.json
          datasource: Prometheus
        kubernetes-pods:
          url: https://raw.githubusercontent.com/dotdc/grafana-dashboards-kubernetes/master/dashboards/k8s-views-pods.json
          datasource: Prometheus
      nginx:
        nginx:
          url: https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/grafana/dashboards/nginx.json
          datasource: Prometheus
        nginx-request-handling-performance:
          url: https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/grafana/dashboards/request-handling-performance.json
          datasource: Prometheus
      postgres:
        crunchy-pgbackrest:
          url: https://raw.githubusercontent.com/CrunchyData/postgres-operator-examples/main/kustomize/monitoring/grafana/dashboards/pgbackrest.json
          datasource: Prometheus
        crunchy-pod-details:
          url: https://raw.githubusercontent.com/CrunchyData/postgres-operator-examples/main/kustomize/monitoring/grafana/dashboards/pod_details.json
          datasource: Prometheus
        crunchy-postgresql-details:
          url: https://raw.githubusercontent.com/CrunchyData/postgres-operator-examples/main/kustomize/monitoring/grafana/dashboards/postgresql_details.json
          datasource: Prometheus
        crunchy-postgresql-overview:
          url: https://raw.githubusercontent.com/CrunchyData/postgres-operator-examples/main/kustomize/monitoring/grafana/dashboards/postgresql_overview.json
          datasource: Prometheus
        crunchy-postgresql-service_health:
          url: https://raw.githubusercontent.com/CrunchyData/postgres-operator-examples/main/kustomize/monitoring/grafana/dashboards/postgresql_service_health.json
          datasource: Prometheus
        crunchy-prometheus-alerts:
          url: https://raw.githubusercontent.com/CrunchyData/postgres-operator-examples/main/kustomize/monitoring/grafana/dashboards/prometheus_alerts.json
          datasource: Prometheus
        crunchy-query-statistics:
          url: https://raw.githubusercontent.com/CrunchyData/postgres-operator-examples/main/kustomize/monitoring/grafana/dashboards/query_statistics.json
          datasource: Prometheus
      victoriametrics:
        vmsingle:
          gnetId: 10229
          revision: 35
          datasource: Prometheus
        vmagent:
          gnetId: 12683
          revision: 17
          datasource: Prometheus
        vmalert:
          gnetId: 14950
          revision: 10
          datasource: Prometheus
        operator:
          gnetId: 17869
          revision: 2
          datasource: Prometheus
      windows:
        nvidia-gpu:
          gnetId: 14574
          revision: 8
          datasource: Prometheus
        windows-node-gerard3:
          gnetId: 12422
          revision: 1
          datasource: Prometheus
        windows-exporter-girb90:
          gnetId: 14694
          revision: 2
          datasource: Prometheus
        windows-exporter-gefidalgo:
          gnetId: 14451
          revision: 1
          datasource: Prometheus
        windows-status-prometheus-gattancha:
          gnetId: 16523
          revision: 1
          datasource: *DSP
        windows-node-jakub-pinkas:
          gnetId:
          revision: 3
          datasource: Prometheus
    sidecar:
      dashboards:
        enabled: true
        searchNamespace: ALL
        labelValue: ""
        label: grafana_dashboard
        folderAnnotation: grafana_folder
        provider:
          disableDelete: true
          foldersFromFilesStructure: true
      datasources:
        enabled: true
        searchNamespace: ALL
        labelValue: ""
    serviceMonitor:
      enabled: true
    ingress:
      enabled: true
      ingressClassName: "nginx-internal"
      hosts: &host ["${APP_DNS_GRAFANA}"]
      tls: [hosts: *host]
    persistence:
      enabled: false
    testFramework:
      enabled: false
    topologySpreadConstraints:
      - maxSkew: 1
        topologyKey: "kubernetes.io/hostname"
        whenUnsatisfiable: DoNotSchedule
        labelSelector:
          matchLabels:
            app.kubernetes.io/instance: "grafana"
            app.kubernetes.io/name: "grafana"
