---
prometheus:
  enabled: true # prompp still froze nodes :(
  externalUrl: "https://${APP_DNS_PROMETHEUS:=prom}/"
  ingress:
    enabled: true # prompp still froze nodes :(
    ingressClassName: "nginx-internal"
    hosts: &hostprom ["${APP_DNS_PROMETHEUS:=prom}"]
    tls: [hosts: *hostprom]
    paths: ["/"]
    pathType: Prefix
  prometheusSpec:
    # Prometheus resource allocation
    # TODO: set default intervals to debug memory spikes
    scrapeInterval: "60s"
    #scrapeInterval: "30s"
    #scrapeTimeout: "15s"
    replicas: 0
    retention: 14d
    retentionSize: 30GB
    walCompression: true
    storageSpec:
      volumeClaimTemplate:
        spec:
          storageClassName: block
          resources:
            requests:
              storage: 35Gi
    resources:
      requests:
        cpu: 250m
        memory: 2Gi
      limits:
        cpu: 1 # it uses less than this, just to be safe
        memory: 8Gi
    # scheduling
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
            - matchExpressions:
                - key: kubernetes.io/hostname
                  operator: In
                  values: [ange, charlotte, dorothy]
    topologySpreadConstraints:
      - maxSkew: 1
        topologyKey: "kubernetes.io/hostname"
        whenUnsatisfiable: "DoNotSchedule"
        labelSelector:
          matchLabels:
            prometheus: "kps"
    # don't use labels from this KPS deployment for labelSelector of these Prometheus resources
    ruleSelectorNilUsesHelmValues: false
    serviceMonitorSelectorNilUsesHelmValues: false
    podMonitorSelectorNilUsesHelmValues: false
    probeSelectorNilUsesHelmValues: false
    scrapeConfigSelectorNilUsesHelmValues: false
    # # enable features
    # enableAdminAPI: true
    # enableFeatures:
    #   - auto-gomaxprocs
    #   - memory-snapshot-on-shutdown
    #   - new-service-discovery-manager
    # multi clusters
    externalLabels:
      cluster: "${CLUSTER_NAME}"
    replicaExternalLabelName: "__replica__" # must match with thanos value `.query.replicaLabel[0]`
    image:
      registry: docker.io
      repository: prompp/prompp
      tag: 2.53.2-0.2.3
      # registry: quay.io
      # repository: prometheus/prometheus
      # tag: v2.51.0-rc.0-dedupelabels
    securityContext: # needed for prompp
      runAsNonRoot: true
      runAsUser: 64535
      runAsGroup: 64535
      fsGroup: 64535
    # external AlertManager (non-KPS)
    alertingEndpoints:
      - apiVersion: v2
        name: alertmanager
        namespace: monitoring
        port: 9093
      - apiVersion: v2
        name: alertmanager-local
        namespace: monitoring
        port: 9093
