---
apiVersion: helm.toolkit.fluxcd.io/v2beta2
kind: HelmRelease
metadata:
  name: &app karma
  namespace: monitoring
spec:
  interval: 5m
  chart:
    spec:
      chart: app-template
      version: "2.6.0"
      sourceRef:
        name: bjw-s
        kind: HelmRepository
        namespace: flux-system
  values:
    controllers:
      main:
        type: deployment
        replicas: 3
        pod:
          labels:
            ingress.home.arpa/nginx-external: "allow"
            prom.home.arpa/kps: "allow"
        containers:
          main:
            image: &img
              repository: "ghcr.io/prymitive/karma"
              tag: "v0.119@sha256:ff17725ded0810cf09fc63f343365a297221cb313309aedfde6db328c1009d08"
            env:
              TZ: "${CONFIG_TZ}"
              # TODO: use full config mapping to all AM instances and 1 cluster, including different deployments for authentik, cloudflared and Tailscale's forward auth headers
              ALERTMANAGER_URI: "http://alertmanager-local.monitoring.svc:9093"
              ALERTMANAGER_EXTERNAL_URI: "https://${APP_DNS_ALERTMANAGER}"
              ALERTMANAGER_PROXY: "true"
              FILTERS_DEFAULT: "@state!=suppressed"
            securityContext: &sc
              readOnlyRootFilesystem: true
              allowPrivilegeEscalation: false
              capabilities:
                drop: ["ALL"]
            resources:
              requests:
                cpu: "10m"
                memory: "128Mi"
              limits:
                cpu: "3000m"
                memory: "500Mi"
    service:
      main:
        ports:
          http:
            port: 8080
    ingress:
      main:
        enabled: true
        primary: true
        className: "nginx-external"
        annotations:
          external-dns.alpha.kubernetes.io/target: "${DNS_CF}"
          external-dns.alpha.kubernetes.io/cloudflare-proxied: "true"
          # external auth managed by Cloudflare Zero Trust, so authentik won't be SPoF if internal access not working
        hosts:
          - host: &host "${APP_DNS_KARMA}"
            paths: &paths
              - path: /
                pathType: Prefix
                service:
                  name: main
                  port: http
        tls:
          - hosts: [*host]
      tailscale:
        enabled: true
        primary: true
        className: "tailscale"
        hosts:
          - host: &host "${APP_DNS_TS_KARMA}"
            paths: *paths
        tls:
          - hosts: [*host]
    defaultPodOptions:
      automountServiceAccountToken: false
      enableServiceLinks: false
      securityContext:
        runAsNonRoot: true
        runAsUser: &uid ${APP_UID_KARMA}
        runAsGroup: *uid
        fsGroup: *uid
        fsGroupChangePolicy: "Always"
        seccompProfile: { type: "RuntimeDefault" }
      topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: "kubernetes.io/hostname"
          whenUnsatisfiable: "DoNotSchedule"
          labelSelector:
            matchLabels:
              app.kubernetes.io/name: *app
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: "fuckoff.home.arpa/karma"
                    operator: "DoesNotExist"
